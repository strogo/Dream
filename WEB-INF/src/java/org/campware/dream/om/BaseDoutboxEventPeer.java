package org.campware.dream.om;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

import org.apache.torque.Torque;
import org.apache.torque.TorqueException;
import org.apache.torque.map.MapBuilder;
import org.apache.torque.map.TableMap;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.util.BasePeer;
import org.apache.torque.util.Criteria;

import com.workingdogs.village.DataSetException;
import com.workingdogs.village.QueryDataSet;
import com.workingdogs.village.Record;

// Local classes
import org.campware.dream.om.map.*;


   
   
   
/**
  * This class was autogenerated by Torque on:
  *
  * [Thu Jul 29 08:38:49 CEST 2004]
  *
  */
public abstract class BaseDoutboxEventPeer
    extends BasePeer
{

    /** the default database name for this class */
    public static final String DATABASE_NAME = "dream";

     /** the table name for this class */
    public static final String TABLE_NAME = "DOUTBOX_EVENT";

    /**
     * @return the map builder for this peer
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static MapBuilder getMapBuilder()
        throws TorqueException
    {
        return getMapBuilder(DoutboxEventMapBuilder.CLASS_NAME);
    }

    /** the column name for the DOUTBOX_EVENT_ID field */
    public static final String DOUTBOX_EVENT_ID;
    /** the column name for the DOUTBOX_EVENT_CODE field */
    public static final String DOUTBOX_EVENT_CODE;
    /** the column name for the STATUS field */
    public static final String STATUS;
    /** the column name for the PRIORITY field */
    public static final String PRIORITY;
    /** the column name for the ISSUED_DATE field */
    public static final String ISSUED_DATE;
    /** the column name for the CLOSED_DATE field */
    public static final String CLOSED_DATE;
    /** the column name for the SENT_TIME field */
    public static final String SENT_TIME;
    /** the column name for the EVENT_CHANNEL field */
    public static final String EVENT_CHANNEL;
    /** the column name for the EVENT_TYPE field */
    public static final String EVENT_TYPE;
    /** the column name for the EMAIL_FORMAT field */
    public static final String EMAIL_FORMAT;
    /** the column name for the DISTRIBUTOR_ID field */
    public static final String DISTRIBUTOR_ID;
    /** the column name for the PROJECT_ID field */
    public static final String PROJECT_ID;
    /** the column name for the PRODUCT_ID field */
    public static final String PRODUCT_ID;
    /** the column name for the RECEIVER field */
    public static final String RECEIVER;
    /** the column name for the SUBJECT field */
    public static final String SUBJECT;
    /** the column name for the BODY field */
    public static final String BODY;
    /** the column name for the NOTES field */
    public static final String NOTES;
    /** the column name for the CREATED field */
    public static final String CREATED;
    /** the column name for the MODIFIED field */
    public static final String MODIFIED;
    /** the column name for the CREATED_BY field */
    public static final String CREATED_BY;
    /** the column name for the MODIFIED_BY field */
    public static final String MODIFIED_BY;

    static
    {
    DOUTBOX_EVENT_ID = "DOUTBOX_EVENT.DOUTBOX_EVENT_ID";
    DOUTBOX_EVENT_CODE = "DOUTBOX_EVENT.DOUTBOX_EVENT_CODE";
    STATUS = "DOUTBOX_EVENT.STATUS";
    PRIORITY = "DOUTBOX_EVENT.PRIORITY";
    ISSUED_DATE = "DOUTBOX_EVENT.ISSUED_DATE";
    CLOSED_DATE = "DOUTBOX_EVENT.CLOSED_DATE";
    SENT_TIME = "DOUTBOX_EVENT.SENT_TIME";
    EVENT_CHANNEL = "DOUTBOX_EVENT.EVENT_CHANNEL";
    EVENT_TYPE = "DOUTBOX_EVENT.EVENT_TYPE";
    EMAIL_FORMAT = "DOUTBOX_EVENT.EMAIL_FORMAT";
    DISTRIBUTOR_ID = "DOUTBOX_EVENT.DISTRIBUTOR_ID";
    PROJECT_ID = "DOUTBOX_EVENT.PROJECT_ID";
    PRODUCT_ID = "DOUTBOX_EVENT.PRODUCT_ID";
    RECEIVER = "DOUTBOX_EVENT.RECEIVER";
    SUBJECT = "DOUTBOX_EVENT.SUBJECT";
    BODY = "DOUTBOX_EVENT.BODY";
    NOTES = "DOUTBOX_EVENT.NOTES";
    CREATED = "DOUTBOX_EVENT.CREATED";
    MODIFIED = "DOUTBOX_EVENT.MODIFIED";
    CREATED_BY = "DOUTBOX_EVENT.CREATED_BY";
    MODIFIED_BY = "DOUTBOX_EVENT.MODIFIED_BY";

        if (Torque.isInit())
        {
            try
            {
                getMapBuilder();
            }
            catch (Exception e)
            {
                category.error("Could not initialize Peer", e);
            }
        }
        else
        {
            Torque.registerMapBuilder(DoutboxEventMapBuilder.CLASS_NAME);
        }
    }

 
    /** number of columns for this peer */
    public static final int numColumns =  21;

    /** A class that can be returned by this peer. */
    protected static final String CLASSNAME_DEFAULT =
        "org.campware.dream.om.DoutboxEvent";

    /** A class that can be returned by this peer. */
    protected static final Class CLASS_DEFAULT = initClass(CLASSNAME_DEFAULT);

    /**
     * Class object initialization method.
     *
     * @param className name of the class to initialize
     * @return the initialized class
     */
    private static Class initClass(String className)
    {
        Class c = null;
        try
        {
            c = Class.forName(className);
        }
        catch (Throwable t)
        {
            category.error("A FATAL ERROR has occurred which should not "
                + "have happened under any circumstance.  Please notify "
                + "the Turbine developers <turbine-dev@jakarta.apache.org> "
                + "and give as many details as possible (including the error "
                + "stack trace).", t);

            // Error objects should always be propogated.
            if (t instanceof Error)
            {
                throw (Error) t.fillInStackTrace();
            }
        }
        return c;
    }


    /**
     * Get the list of objects for a ResultSet.  Please not that your
     * resultset MUST return columns in the right order.  You can use
     * getFieldNames() in BaseObject to get the correct sequence.
     *
     * @param results the ResultSet
     * @return the list of objects
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List resultSet2Objects(java.sql.ResultSet results)
            throws TorqueException
    {
        try
        {
            QueryDataSet qds = null;
            List rows = null;
            try
            {
                qds = new QueryDataSet(results);
                rows = getSelectResults(qds);
            }
            finally
            {
                if (qds != null)
                {
                    qds.close();
                }
            }

            return populateObjects(rows);
        }
        catch (SQLException e)
        {
            throw new TorqueException(e);
        }
        catch (DataSetException e)
        {
            throw new TorqueException(e);
        }
    }



    /**
     * Method to do inserts.
     *
     * @param criteria object used to create the INSERT statement.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static ObjectKey doInsert(Criteria criteria)
        throws TorqueException
    {
        return BaseDoutboxEventPeer
            .doInsert(criteria, (Connection) null);
    }

    /**
     * Method to do inserts.  This method is to be used during a transaction,
     * otherwise use the doInsert(Criteria) method.  It will take care of
     * the connection details internally.
     *
     * @param criteria object used to create the INSERT statement.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static ObjectKey doInsert(Criteria criteria, Connection con)
        throws TorqueException
    {
                                                                                                                                                                                                                                                                                                           
        // Set the correct dbName if it has not been overridden
        // criteria.getDbName will return the same object if not set to
        // another value so == check is okay and faster
        if (criteria.getDbName() == Torque.getDefaultDB())
        {
            criteria.setDbName(DATABASE_NAME);
        }
        if (con == null)
        {
            return BasePeer.doInsert(criteria);
        }
        else
        {
            return BasePeer.doInsert(criteria, con);
        }
    }

    /**
     * Add all the columns needed to create a new object.
     *
     * @param criteria object containing the columns to add.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void addSelectColumns(Criteria criteria)
            throws TorqueException
    {
            criteria.addSelectColumn(DOUTBOX_EVENT_ID);
            criteria.addSelectColumn(DOUTBOX_EVENT_CODE);
            criteria.addSelectColumn(STATUS);
            criteria.addSelectColumn(PRIORITY);
            criteria.addSelectColumn(ISSUED_DATE);
            criteria.addSelectColumn(CLOSED_DATE);
            criteria.addSelectColumn(SENT_TIME);
            criteria.addSelectColumn(EVENT_CHANNEL);
            criteria.addSelectColumn(EVENT_TYPE);
            criteria.addSelectColumn(EMAIL_FORMAT);
            criteria.addSelectColumn(DISTRIBUTOR_ID);
            criteria.addSelectColumn(PROJECT_ID);
            criteria.addSelectColumn(PRODUCT_ID);
            criteria.addSelectColumn(RECEIVER);
            criteria.addSelectColumn(SUBJECT);
            criteria.addSelectColumn(BODY);
            criteria.addSelectColumn(NOTES);
            criteria.addSelectColumn(CREATED);
            criteria.addSelectColumn(MODIFIED);
            criteria.addSelectColumn(CREATED_BY);
            criteria.addSelectColumn(MODIFIED_BY);
        }


    /**
     * Create a new object of type cls from a resultset row starting
     * from a specified offset.  This is done so that you can select
     * other rows than just those needed for this object.  You may
     * for example want to create two objects from the same row.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static DoutboxEvent row2Object(Record row,
                                             int offset,
                                             Class cls)
        throws TorqueException
    {
        try
        {
            DoutboxEvent obj = (DoutboxEvent) cls.newInstance();
            populateObject(row, offset, obj);
                            obj.setModified(false);
                        obj.setNew(false);

            return obj;
        }
        catch (InstantiationException e)
        {
            throw new TorqueException(e);
        }
        catch (IllegalAccessException e)
        {
            throw new TorqueException(e);
        }
    }

    /**
     * Populates an object from a resultset row starting
     * from a specified offset.  This is done so that you can select
     * other rows than just those needed for this object.  You may
     * for example want to create two objects from the same row.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void populateObject(Record row,
                                      int offset,
                                      DoutboxEvent obj)
        throws TorqueException
    {
        try
        {
                                        obj.setDoutboxEventId(row.getValue(offset + 0).asInt());
                                            obj.setDoutboxEventCode(row.getValue(offset + 1).asString());
                                            obj.setStatus(row.getValue(offset + 2).asInt());
                                            obj.setPriority(row.getValue(offset + 3).asInt());
                                            obj.setIssuedDate(row.getValue(offset + 4).asUtilDate());
                                            obj.setClosedDate(row.getValue(offset + 5).asUtilDate());
                                            obj.setSentTime(row.getValue(offset + 6).asUtilDate());
                                            obj.setEventChannel(row.getValue(offset + 7).asInt());
                                            obj.setEventType(row.getValue(offset + 8).asInt());
                                            obj.setEmailFormat(row.getValue(offset + 9).asInt());
                                            obj.setDistributorId(row.getValue(offset + 10).asInt());
                                            obj.setProjectId(row.getValue(offset + 11).asInt());
                                            obj.setProductId(row.getValue(offset + 12).asInt());
                                            obj.setReceiver(row.getValue(offset + 13).asString());
                                            obj.setSubject(row.getValue(offset + 14).asString());
                                            obj.setBody(row.getValue(offset + 15).asString());
                                            obj.setNotes(row.getValue(offset + 16).asString());
                                            obj.setCreated(row.getValue(offset + 17).asUtilDate());
                                            obj.setModified(row.getValue(offset + 18).asUtilDate());
                                            obj.setCreatedBy(row.getValue(offset + 19).asString());
                                            obj.setModifiedBy(row.getValue(offset + 20).asString());
                            }
        catch (DataSetException e)
        {
            throw new TorqueException(e);
        }
    }

    /**
     * Method to do selects.
     *
     * @param criteria object used to create the SELECT statement.
     * @return List of selected Objects
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelect(Criteria criteria) throws TorqueException
    {
        return populateObjects(doSelectVillageRecords(criteria));
    }

    /**
     * Method to do selects within a transaction.
     *
     * @param criteria object used to create the SELECT statement.
     * @param con the connection to use
     * @return List of selected Objects
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelect(Criteria criteria, Connection con)
        throws TorqueException
    {
        return populateObjects(doSelectVillageRecords(criteria, con));
    }

    /**
     * Grabs the raw Village records to be formed into objects.
     * This method handles connections internally.  The Record objects
     * returned by this method should be considered readonly.  Do not
     * alter the data and call save(), your results may vary, but are
     * certainly likely to result in hard to track MT bugs.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelectVillageRecords(Criteria criteria)
        throws TorqueException
    {
        return BaseDoutboxEventPeer
            .doSelectVillageRecords(criteria, (Connection) null);
    }

    /**
     * Grabs the raw Village records to be formed into objects.
     * This method should be used for transactions
     *
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelectVillageRecords(Criteria criteria, Connection con)
        throws TorqueException
    {
    
        if (criteria.getSelectColumns().size() == 0)
        {
            addSelectColumns(criteria);
        }

                                                                                                                                                                                                                                                                                                           
        // Set the correct dbName if it has not been overridden
        // criteria.getDbName will return the same object if not set to
        // another value so == check is okay and faster
        if (criteria.getDbName() == Torque.getDefaultDB())
        {
            criteria.setDbName(DATABASE_NAME);
        }
        // BasePeer returns a List of Value (Village) arrays.  The array
        // order follows the order columns were placed in the Select clause.
        if (con == null)
        {
            return BasePeer.doSelect(criteria);
        }
        else
        {
            return BasePeer.doSelect(criteria, con);
        }
    }

    /**
     * The returned List will contain objects of the default type or
     * objects that inherit from the default.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List populateObjects(List records)
        throws TorqueException
    {
        List results = new ArrayList(records.size());

        // populate the object(s)
        for (int i = 0; i < records.size(); i++)
        {
            Record row = (Record) records.get(i);
            results.add(DoutboxEventPeer.row2Object(row, 1,
                DoutboxEventPeer.getOMClass()));
        }
        return results;
    }
 

    /**
     * The class that the Peer will make instances of.
     * If the BO is abstract then you must implement this method
     * in the BO.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static Class getOMClass()
        throws TorqueException
    {
            return CLASS_DEFAULT;
        }


    /**
     * Method to do updates.
     *
     * @param criteria object containing data that is used to create the UPDATE
     *        statement.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doUpdate(Criteria criteria) throws TorqueException
    {
         BaseDoutboxEventPeer
            .doUpdate(criteria, (Connection) null);
    }

    /**
     * Method to do updates.  This method is to be used during a transaction,
     * otherwise use the doUpdate(Criteria) method.  It will take care of
     * the connection details internally.
     *
     * @param criteria object containing data that is used to create the UPDATE
     *        statement.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doUpdate(Criteria criteria, Connection con)
        throws TorqueException
    {
        Criteria selectCriteria = new Criteria(DATABASE_NAME, 2);
                                selectCriteria.put(DOUTBOX_EVENT_ID, criteria.remove(DOUTBOX_EVENT_ID));
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          
        // Set the correct dbName if it has not been overridden
        // criteria.getDbName will return the same object if not set to
        // another value so == check is okay and faster
        if (criteria.getDbName() == Torque.getDefaultDB())
        {
            criteria.setDbName(DATABASE_NAME);
        }
        if (con == null)
        {
            BasePeer.doUpdate(selectCriteria, criteria);
        }
        else
        {
            BasePeer.doUpdate(selectCriteria, criteria, con);
        }
    }

    /**
     * Method to do deletes.
     *
     * @param criteria object containing data that is used DELETE from database.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
     public static void doDelete(Criteria criteria) throws TorqueException
     {
         BaseDoutboxEventPeer
            .doDelete(criteria, (Connection) null);
     }

    /**
     * Method to do deletes.  This method is to be used during a transaction,
     * otherwise use the doDelete(Criteria) method.  It will take care of
     * the connection details internally.
     *
     * @param criteria object containing data that is used DELETE from database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
     public static void doDelete(Criteria criteria, Connection con)
        throws TorqueException
     {
                                                                                                                                                                                                                                                                                                           
        // Set the correct dbName if it has not been overridden
        // criteria.getDbName will return the same object if not set to
        // another value so == check is okay and faster
        if (criteria.getDbName() == Torque.getDefaultDB())
        {
            criteria.setDbName(DATABASE_NAME);
        }
        if (con == null)
        {
            BasePeer.doDelete(criteria);
        }
        else
        {
            BasePeer.doDelete(criteria, con);
        }
     }

    /**
     * Method to do selects
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelect(DoutboxEvent obj) throws TorqueException
    {
        return doSelect(buildCriteria(obj));
    }

    /**
     * Method to do inserts
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doInsert(DoutboxEvent obj) throws TorqueException
    {
                obj.setPrimaryKey(doInsert(buildCriteria(obj)));
                obj.setNew(false);
        obj.setModified(false);
    }

    /**
     * @param obj the data object to update in the database.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doUpdate(DoutboxEvent obj) throws TorqueException
    {
        doUpdate(buildCriteria(obj));
        obj.setModified(false);
    }

    /**
     * @param obj the data object to delete in the database.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doDelete(DoutboxEvent obj) throws TorqueException
    {
        doDelete(buildCriteria(obj));
    }

    /**
     * Method to do inserts.  This method is to be used during a transaction,
     * otherwise use the doInsert(DoutboxEvent) method.  It will take
     * care of the connection details internally.
     *
     * @param obj the data object to insert into the database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doInsert(DoutboxEvent obj, Connection con)
        throws TorqueException
    {
                obj.setPrimaryKey(doInsert(buildCriteria(obj), con));
                obj.setNew(false);
        obj.setModified(false);
    }

    /**
     * Method to do update.  This method is to be used during a transaction,
     * otherwise use the doUpdate(DoutboxEvent) method.  It will take
     * care of the connection details internally.
     *
     * @param obj the data object to update in the database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doUpdate(DoutboxEvent obj, Connection con)
        throws TorqueException
    {
        doUpdate(buildCriteria(obj), con);
        obj.setModified(false);
    }

    /**
     * Method to delete.  This method is to be used during a transaction,
     * otherwise use the doDelete(DoutboxEvent) method.  It will take
     * care of the connection details internally.
     *
     * @param obj the data object to delete in the database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doDelete(DoutboxEvent obj, Connection con)
        throws TorqueException
    {
        doDelete(buildCriteria(obj), con);
    }

    /**
     * Method to do deletes.
     *
     * @param pk ObjectKey that is used DELETE from database.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doDelete(ObjectKey pk) throws TorqueException
    {
        BaseDoutboxEventPeer
           .doDelete(pk, (Connection) null);
    }

    /**
     * Method to delete.  This method is to be used during a transaction,
     * otherwise use the doDelete(ObjectKey) method.  It will take
     * care of the connection details internally.
     *
     * @param pk the primary key for the object to delete in the database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doDelete(ObjectKey pk, Connection con)
        throws TorqueException
    {
        doDelete(buildCriteria(pk), con);
    }

    /** Build a Criteria object from an ObjectKey */
    public static Criteria buildCriteria( ObjectKey pk )
    {
        Criteria criteria = new Criteria();
              criteria.add(DOUTBOX_EVENT_ID, pk);
          return criteria;
     }

    /** Build a Criteria object from the data object for this peer */
    public static Criteria buildCriteria( DoutboxEvent obj )
    {
        Criteria criteria = new Criteria(DATABASE_NAME);
                            if (!obj.isNew())
                       criteria.add(DOUTBOX_EVENT_ID, obj.getDoutboxEventId());
                                criteria.add(DOUTBOX_EVENT_CODE, obj.getDoutboxEventCode());
                                criteria.add(STATUS, obj.getStatus());
                                criteria.add(PRIORITY, obj.getPriority());
                                criteria.add(ISSUED_DATE, obj.getIssuedDate());
                                criteria.add(CLOSED_DATE, obj.getClosedDate());
                                criteria.add(SENT_TIME, obj.getSentTime());
                                criteria.add(EVENT_CHANNEL, obj.getEventChannel());
                                criteria.add(EVENT_TYPE, obj.getEventType());
                                criteria.add(EMAIL_FORMAT, obj.getEmailFormat());
                                criteria.add(DISTRIBUTOR_ID, obj.getDistributorId());
                                criteria.add(PROJECT_ID, obj.getProjectId());
                                criteria.add(PRODUCT_ID, obj.getProductId());
                                criteria.add(RECEIVER, obj.getReceiver());
                                criteria.add(SUBJECT, obj.getSubject());
                                criteria.add(BODY, obj.getBody());
                                criteria.add(NOTES, obj.getNotes());
                                criteria.add(CREATED, obj.getCreated());
                                criteria.add(MODIFIED, obj.getModified());
                                criteria.add(CREATED_BY, obj.getCreatedBy());
                                criteria.add(MODIFIED_BY, obj.getModifiedBy());
                return criteria;
    }

 

    
    /**
     * Retrieve a single object by pk
     *
     * @param pk the primary key
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static DoutboxEvent retrieveByPK(int pk)
        throws TorqueException
    {
        return retrieveByPK(SimpleKey.keyFor(pk));
    }

    /**
     * Retrieve a single object by pk
     *
     * @param pk the primary key
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static DoutboxEvent retrieveByPK(ObjectKey pk)
        throws TorqueException
    {
        Connection db = null;
        DoutboxEvent retVal = null;
        try
        {
            db = Torque.getConnection(DATABASE_NAME);
            retVal = retrieveByPK(pk, db);
        }
        finally
        {
            Torque.closeConnection(db);
        }
        return(retVal);
    }

    /**
     * Retrieve a single object by pk
     *
     * @param pk the primary key
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static DoutboxEvent retrieveByPK(ObjectKey pk, Connection con)
        throws TorqueException
    {
        Criteria criteria = buildCriteria(pk);
        List v = doSelect(criteria, con);
        if (v.size() != 1)
        {
            throw new TorqueException("Failed to select one and only one row.");
        }
        else
        {
            return (DoutboxEvent)v.get(0);
        }
    }

    /**
     * Retrieve a multiple objects by pk
     *
     * @param pks List of primary keys
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List retrieveByPKs(List pks)
        throws TorqueException
    {
        Connection db = null;
        List retVal = null;
        try
        {
           db = Torque.getConnection(DATABASE_NAME);
           retVal = retrieveByPKs(pks, db);
        }
        finally
        {
            Torque.closeConnection(db);
        }
        return(retVal);
    }

    /**
     * Retrieve a multiple objects by pk
     *
     * @param pks List of primary keys
     * @param dbcon the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List retrieveByPKs( List pks, Connection dbcon )
        throws TorqueException
    {
        List objs = null;
        if (pks == null || pks.size() == 0)
        {
            objs = new LinkedList();
        }
        else
        {
            Criteria criteria = new Criteria();
              criteria.addIn( DOUTBOX_EVENT_ID, pks );
          objs = doSelect(criteria, dbcon);
        }
        return objs;
    }

 



       
          
                       
          
          


    /**
     * selects a collection of DoutboxEvent objects pre-filled with their
     * Distributor objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in DoutboxEventPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinDistributor(Criteria c)
        throws TorqueException
    {
    
        // Set the correct dbName if it has not been overridden
        // c.getDbName will return the same object if not set to
        // another value so == check is okay and faster
        if (c.getDbName() == Torque.getDefaultDB())
        {
            c.setDbName(DATABASE_NAME);
        }

        DoutboxEventPeer.addSelectColumns(c);
        int offset = numColumns + 1;
        DistributorPeer.addSelectColumns(c);


                  c.addJoin(DoutboxEventPeer.DISTRIBUTOR_ID,
            DistributorPeer.DISTRIBUTOR_ID);
     

                                                                                                                                                                                                                                                                                                           
        List rows = BasePeer.doSelect(c);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

            Class omClass = DoutboxEventPeer.getOMClass();

            DoutboxEvent obj1 = (DoutboxEvent) DoutboxEventPeer
                .row2Object(row, 1, omClass);


             omClass = DistributorPeer.getOMClass();
            Distributor obj2 = (Distributor)DistributorPeer
                .row2Object(row, offset, omClass);

            boolean newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                DoutboxEvent temp_obj1 = (DoutboxEvent)results.get(j);
                Distributor temp_obj2 = (Distributor)temp_obj1.getDistributor();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addDoutboxEvent(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initDoutboxEvents();
                obj2.addDoutboxEvent(obj1);
            }
            results.add(obj1);
        }
        return results;
    }
            
                       
          
          


    /**
     * selects a collection of DoutboxEvent objects pre-filled with their
     * Project objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in DoutboxEventPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinProject(Criteria c)
        throws TorqueException
    {
    
        // Set the correct dbName if it has not been overridden
        // c.getDbName will return the same object if not set to
        // another value so == check is okay and faster
        if (c.getDbName() == Torque.getDefaultDB())
        {
            c.setDbName(DATABASE_NAME);
        }

        DoutboxEventPeer.addSelectColumns(c);
        int offset = numColumns + 1;
        ProjectPeer.addSelectColumns(c);


                  c.addJoin(DoutboxEventPeer.PROJECT_ID,
            ProjectPeer.PROJECT_ID);
     

                                                                                                                                                                                                                                                                                                           
        List rows = BasePeer.doSelect(c);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

            Class omClass = DoutboxEventPeer.getOMClass();

            DoutboxEvent obj1 = (DoutboxEvent) DoutboxEventPeer
                .row2Object(row, 1, omClass);


             omClass = ProjectPeer.getOMClass();
            Project obj2 = (Project)ProjectPeer
                .row2Object(row, offset, omClass);

            boolean newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                DoutboxEvent temp_obj1 = (DoutboxEvent)results.get(j);
                Project temp_obj2 = (Project)temp_obj1.getProject();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addDoutboxEvent(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initDoutboxEvents();
                obj2.addDoutboxEvent(obj1);
            }
            results.add(obj1);
        }
        return results;
    }
            
                       
          
          


    /**
     * selects a collection of DoutboxEvent objects pre-filled with their
     * Product objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in DoutboxEventPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinProduct(Criteria c)
        throws TorqueException
    {
    
        // Set the correct dbName if it has not been overridden
        // c.getDbName will return the same object if not set to
        // another value so == check is okay and faster
        if (c.getDbName() == Torque.getDefaultDB())
        {
            c.setDbName(DATABASE_NAME);
        }

        DoutboxEventPeer.addSelectColumns(c);
        int offset = numColumns + 1;
        ProductPeer.addSelectColumns(c);


                  c.addJoin(DoutboxEventPeer.PRODUCT_ID,
            ProductPeer.PRODUCT_ID);
     

                                                                                                                                                                                                                                                                                                           
        List rows = BasePeer.doSelect(c);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

            Class omClass = DoutboxEventPeer.getOMClass();

            DoutboxEvent obj1 = (DoutboxEvent) DoutboxEventPeer
                .row2Object(row, 1, omClass);


             omClass = ProductPeer.getOMClass();
            Product obj2 = (Product)ProductPeer
                .row2Object(row, offset, omClass);

            boolean newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                DoutboxEvent temp_obj1 = (DoutboxEvent)results.get(j);
                Product temp_obj2 = (Product)temp_obj1.getProduct();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addDoutboxEvent(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initDoutboxEvents();
                obj2.addDoutboxEvent(obj1);
            }
            results.add(obj1);
        }
        return results;
    }
     

  
                   
    
     
                       
          

    /**
     * selects a collection of DoutboxEvent objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in DoutboxEventPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptDistributor(Criteria c)
        throws TorqueException
    {
    
        // Set the correct dbName if it has not been overridden
        // c.getDbName will return the same object if not set to another value
        // so == check is okay and faster
        if (c.getDbName() == Torque.getDefaultDB())
        {
            c.setDbName(DATABASE_NAME);
        }

        addSelectColumns(c);
        int offset2 = numColumns + 1;
                    
                              
                ProjectPeer.addSelectColumns(c);
        int offset3 = offset2 + ProjectPeer.numColumns;
                                          
                ProductPeer.addSelectColumns(c);
        int offset4 = offset3 + ProductPeer.numColumns;
                                                                                                                                                                                                                                                                                                                                         
        List rows = BasePeer.doSelect(c);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record)rows.get(i);

                        Class omClass = DoutboxEventPeer.getOMClass();
      
            DoutboxEvent obj1 = (DoutboxEvent)DoutboxEventPeer
                .row2Object(row, 1, omClass);


                            
                                  
                                                
                        
            
                 omClass = ProjectPeer.getOMClass();
                Project obj2 = (Project)ProjectPeer
                .row2Object( row, offset2, omClass);

             boolean  newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                DoutboxEvent temp_obj1 = (DoutboxEvent)results.get(j);
                Project temp_obj2 = (Project)temp_obj1.getProject();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addDoutboxEvent(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initDoutboxEvents();
                obj2.addDoutboxEvent(obj1);
            }
                                
                                                
                        
            
                 omClass = ProductPeer.getOMClass();
                Product obj3 = (Product)ProductPeer
                .row2Object( row, offset3, omClass);

             newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                DoutboxEvent temp_obj1 = (DoutboxEvent)results.get(j);
                Product temp_obj3 = (Product)temp_obj1.getProduct();
                if (temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj3.addDoutboxEvent(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj3.initDoutboxEvents();
                obj3.addDoutboxEvent(obj1);
            }
                        results.add(obj1);
        }
        return results;
    }
  
     
                       
          

    /**
     * selects a collection of DoutboxEvent objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in DoutboxEventPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptProject(Criteria c)
        throws TorqueException
    {
    
        // Set the correct dbName if it has not been overridden
        // c.getDbName will return the same object if not set to another value
        // so == check is okay and faster
        if (c.getDbName() == Torque.getDefaultDB())
        {
            c.setDbName(DATABASE_NAME);
        }

        addSelectColumns(c);
        int offset2 = numColumns + 1;
                    
                DistributorPeer.addSelectColumns(c);
        int offset3 = offset2 + DistributorPeer.numColumns;
                                          
                              
                ProductPeer.addSelectColumns(c);
        int offset4 = offset3 + ProductPeer.numColumns;
                                                                                                                                                                                                                                                                                                                                         
        List rows = BasePeer.doSelect(c);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record)rows.get(i);

                        Class omClass = DoutboxEventPeer.getOMClass();
      
            DoutboxEvent obj1 = (DoutboxEvent)DoutboxEventPeer
                .row2Object(row, 1, omClass);


                            
                                                
                        
            
                 omClass = DistributorPeer.getOMClass();
                Distributor obj2 = (Distributor)DistributorPeer
                .row2Object( row, offset2, omClass);

             boolean  newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                DoutboxEvent temp_obj1 = (DoutboxEvent)results.get(j);
                Distributor temp_obj2 = (Distributor)temp_obj1.getDistributor();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addDoutboxEvent(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initDoutboxEvents();
                obj2.addDoutboxEvent(obj1);
            }
                                
                                  
                                                
                        
            
                 omClass = ProductPeer.getOMClass();
                Product obj3 = (Product)ProductPeer
                .row2Object( row, offset3, omClass);

             newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                DoutboxEvent temp_obj1 = (DoutboxEvent)results.get(j);
                Product temp_obj3 = (Product)temp_obj1.getProduct();
                if (temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj3.addDoutboxEvent(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj3.initDoutboxEvents();
                obj3.addDoutboxEvent(obj1);
            }
                        results.add(obj1);
        }
        return results;
    }
  
     
                       
          

    /**
     * selects a collection of DoutboxEvent objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in DoutboxEventPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptProduct(Criteria c)
        throws TorqueException
    {
    
        // Set the correct dbName if it has not been overridden
        // c.getDbName will return the same object if not set to another value
        // so == check is okay and faster
        if (c.getDbName() == Torque.getDefaultDB())
        {
            c.setDbName(DATABASE_NAME);
        }

        addSelectColumns(c);
        int offset2 = numColumns + 1;
                    
                DistributorPeer.addSelectColumns(c);
        int offset3 = offset2 + DistributorPeer.numColumns;
                                          
                ProjectPeer.addSelectColumns(c);
        int offset4 = offset3 + ProjectPeer.numColumns;
                                          
                                                                                                                                                                                                                                                                                                                             
        List rows = BasePeer.doSelect(c);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record)rows.get(i);

                        Class omClass = DoutboxEventPeer.getOMClass();
      
            DoutboxEvent obj1 = (DoutboxEvent)DoutboxEventPeer
                .row2Object(row, 1, omClass);


                            
                                                
                        
            
                 omClass = DistributorPeer.getOMClass();
                Distributor obj2 = (Distributor)DistributorPeer
                .row2Object( row, offset2, omClass);

             boolean  newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                DoutboxEvent temp_obj1 = (DoutboxEvent)results.get(j);
                Distributor temp_obj2 = (Distributor)temp_obj1.getDistributor();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addDoutboxEvent(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initDoutboxEvents();
                obj2.addDoutboxEvent(obj1);
            }
                                
                                                
                        
            
                 omClass = ProjectPeer.getOMClass();
                Project obj3 = (Project)ProjectPeer
                .row2Object( row, offset3, omClass);

             newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                DoutboxEvent temp_obj1 = (DoutboxEvent)results.get(j);
                Project temp_obj3 = (Project)temp_obj1.getProject();
                if (temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj3.addDoutboxEvent(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj3.initDoutboxEvents();
                obj3.addDoutboxEvent(obj1);
            }
                                
                          results.add(obj1);
        }
        return results;
    }
    

    /**
     * Returns the TableMap related to this peer.  This method is not
     * needed for general use but a specific application could have a need.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static TableMap getTableMap()
        throws TorqueException
    {
        return Torque.getDatabaseMap(DATABASE_NAME).getTable(TABLE_NAME);
    }
 }
