package org.campware.dream.om;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Date;
import java.util.Collections;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;

   
      
   
/**
 * This class was autogenerated by Torque on:
 *
 * [Thu Jul 29 08:38:49 CEST 2004]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to DcontractItem
 */
public abstract class BaseDcontractItem extends BaseObject
{
    /** The Peer class */
    private static final DcontractItemPeer peer =
        new DcontractItemPeer();

                  
        /**
         * The value for the dcontract_item_id field
         */
        private int dcontract_item_id;
                                                                            
        /**
         * The value for the dcontract_id field
         */
        private int dcontract_id = 1000;
                                                                            
        /**
         * The value for the cost_type_id field
         */
        private int cost_type_id = 1000;
                                                                            
        /**
         * The value for the cost_function field
         */
        private int cost_function = 10;
                                                              
        /**
         * The value for the cost_amount field
         */
        private BigDecimal cost_amount= new BigDecimal(0);
      
      
        /**
         * Get the DcontractItemId
         *
         * @return int
         */
        public int getDcontractItemId()
        {
            return dcontract_item_id;
        }

                                            
        /**
         * Set the value of DcontractItemId
         *
         * @param v new value
         */
        public void setDcontractItemId(int v) 
        {
          


         if (this.dcontract_item_id != v)
        {
             this.dcontract_item_id = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the DcontractId
         *
         * @return int
         */
        public int getDcontractId()
        {
            return dcontract_id;
        }

                                                      
        /**
         * Set the value of DcontractId
         *
         * @param v new value
         */
        public void setDcontractId(int v) throws TorqueException
        {
          


         if (this.dcontract_id != v)
        {
             this.dcontract_id = v;
            setModified(true);
        }

                                          
                if (aDcontract != null && !(aDcontract.getDcontractId()==v))
                {
            aDcontract = null;
        }
          
                       }


        /**
         * Get the CostTypeId
         *
         * @return int
         */
        public int getCostTypeId()
        {
            return cost_type_id;
        }

                                                      
        /**
         * Set the value of CostTypeId
         *
         * @param v new value
         */
        public void setCostTypeId(int v) throws TorqueException
        {
          


         if (this.cost_type_id != v)
        {
             this.cost_type_id = v;
            setModified(true);
        }

                                          
                if (aCostType != null && !(aCostType.getCostTypeId()==v))
                {
            aCostType = null;
        }
          
                       }


        /**
         * Get the CostFunction
         *
         * @return int
         */
        public int getCostFunction()
        {
            return cost_function;
        }

                                            
        /**
         * Set the value of CostFunction
         *
         * @param v new value
         */
        public void setCostFunction(int v) 
        {
          


         if (this.cost_function != v)
        {
             this.cost_function = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the CostAmount
         *
         * @return BigDecimal
         */
        public BigDecimal getCostAmount()
        {
            return cost_amount;
        }

                                            
        /**
         * Set the value of CostAmount
         *
         * @param v new value
         */
        public void setCostAmount(BigDecimal v) 
        {
          


         if (!ObjectUtils.equals(this.cost_amount, v))
        {
             this.cost_amount = v;
            setModified(true);
        }

                  
                       }


 
     
   
             
   
       private Dcontract aDcontract;

    /**
     * Declares an association between this object and a Dcontract object
     *
     * @param v Dcontract
     * @throws TorqueException
     */
    public void setDcontract(Dcontract v) throws TorqueException
    {
           if (v == null)
        {
                        setDcontractId(1000);
                    }
        else
        {
            setDcontractId(v.getDcontractId());
        }
           aDcontract = v;
    }

                 
    /**
     * Get the associated Dcontract object
     *
     * @return the associated Dcontract object
     * @throws TorqueException
     */
    public Dcontract getDcontract() throws TorqueException
    {
        if (aDcontract == null && (this.dcontract_id > 0))
        {
              aDcontract = DcontractPeer.retrieveByPK(SimpleKey.keyFor(this.dcontract_id));
      
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Dcontract obj = DcontractPeer.retrieveByPK(this.dcontract_id);
               obj.addDcontractItems(this);
             */
        }
        return aDcontract;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setDcontractKey(ObjectKey key) throws TorqueException
    {
    
                                        setDcontractId(((NumberKey) key).intValue());
                    }
 
   
             
   
       private CostType aCostType;

    /**
     * Declares an association between this object and a CostType object
     *
     * @param v CostType
     * @throws TorqueException
     */
    public void setCostType(CostType v) throws TorqueException
    {
           if (v == null)
        {
                        setCostTypeId(1000);
                    }
        else
        {
            setCostTypeId(v.getCostTypeId());
        }
           aCostType = v;
    }

                 
    /**
     * Get the associated CostType object
     *
     * @return the associated CostType object
     * @throws TorqueException
     */
    public CostType getCostType() throws TorqueException
    {
        if (aCostType == null && (this.cost_type_id > 0))
        {
              aCostType = CostTypePeer.retrieveByPK(SimpleKey.keyFor(this.cost_type_id));
      
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               CostType obj = CostTypePeer.retrieveByPK(this.cost_type_id);
               obj.addDcontractItems(this);
             */
        }
        return aCostType;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setCostTypeKey(ObjectKey key) throws TorqueException
    {
    
                                        setCostTypeId(((NumberKey) key).intValue());
                    }
    
        
    
     


    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
             save(DcontractItemPeer.getMapBuilder()
                .getDatabaseMap().getName());
     }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
         try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }

     }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
      {
        alreadyInSave = true;



  
        // If this object has been modified, then save it to the database.
        if (isModified())
        {
            if (isNew())
            {
                DcontractItemPeer.doInsert((DcontractItem) this, con);
                setNew(false);
            }
            else
            {
                DcontractItemPeer.doUpdate((DcontractItem) this, con);
            }
        }

              alreadyInSave = false;
      }
      }


                
    
    

        /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param  dcontract_item_id ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        
    {
                    setDcontractItemId(((NumberKey) key).intValue());
            }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) 
    {
                    setDcontractItemId(Integer.parseInt(key));
            }


    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        return SimpleKey.keyFor(getDcontractItemId());
    }

 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public DcontractItem copy() throws TorqueException
    {
        return copyInto(new DcontractItem());
    }

    protected DcontractItem copyInto(DcontractItem copyObj) throws TorqueException
    {
        copyObj.setDcontractItemId(dcontract_item_id);
        copyObj.setDcontractId(dcontract_id);
        copyObj.setCostTypeId(cost_type_id);
        copyObj.setCostFunction(cost_function);
        copyObj.setCostAmount(cost_amount);

  copyObj.setNew(false);
      copyObj.setNew(true);

                      copyObj.setDcontractItemId(0);
                                    return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public DcontractItemPeer getPeer()
    {
        return peer;
    }
}
