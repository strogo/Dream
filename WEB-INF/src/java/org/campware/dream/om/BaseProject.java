package org.campware.dream.om;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Date;
import java.util.Collections;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;

   
   
/**
 * This class was autogenerated by Torque on:
 *
 * [Thu Jul 29 08:38:49 CEST 2004]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Project
 */
public abstract class BaseProject extends BaseObject
{
    /** The Peer class */
    private static final ProjectPeer peer =
        new ProjectPeer();

                  
        /**
         * The value for the project_id field
         */
        private int project_id;
                                                                                      
        /**
         * The value for the project_code field
         */
        private String project_code = "AUTO";
                                                                            
        /**
         * The value for the status field
         */
        private int status = 30;
                                                                            
        /**
         * The value for the project_cat_id field
         */
        private int project_cat_id = 1000;
              
        /**
         * The value for the project_name field
         */
        private String project_name;
              
        /**
         * The value for the start_date field
         */
        private Date start_date;
              
        /**
         * The value for the end_date field
         */
        private Date end_date;
                                                              
        /**
         * The value for the expenses field
         */
        private BigDecimal expenses= new BigDecimal(0);
                                                              
        /**
         * The value for the revenues field
         */
        private BigDecimal revenues= new BigDecimal(0);
              
        /**
         * The value for the custom_1 field
         */
        private String custom_1;
              
        /**
         * The value for the custom_2 field
         */
        private String custom_2;
              
        /**
         * The value for the custom_3 field
         */
        private String custom_3;
              
        /**
         * The value for the custom_4 field
         */
        private String custom_4;
              
        /**
         * The value for the custom_5 field
         */
        private String custom_5;
              
        /**
         * The value for the custom_6 field
         */
        private String custom_6;
              
        /**
         * The value for the notes field
         */
        private String notes;
              
        /**
         * The value for the created field
         */
        private Date created;
              
        /**
         * The value for the modified field
         */
        private Date modified;
              
        /**
         * The value for the created_by field
         */
        private String created_by;
              
        /**
         * The value for the modified_by field
         */
        private String modified_by;
      
      
        /**
         * Get the ProjectId
         *
         * @return int
         */
        public int getProjectId()
        {
            return project_id;
        }

                                                                              
        /**
         * Set the value of ProjectId
         *
         * @param v new value
         */
        public void setProjectId(int v) throws TorqueException
        {
          


         if (this.project_id != v)
        {
             this.project_id = v;
            setModified(true);
        }

                  
                                                  
              // update associated Dcontract
              if (collDcontracts != null)
              {
                  for (int i = 0; i < collDcontracts.size(); i++)
                  {
                      ((Dcontract) collDcontracts.get(i))
                          .setProjectId(v);
                  }
              }
                                                              
              // update associated Dorder
              if (collDorders != null)
              {
                  for (int i = 0; i < collDorders.size(); i++)
                  {
                      ((Dorder) collDorders.get(i))
                          .setProjectId(v);
                  }
              }
                                                              
              // update associated DinboxEvent
              if (collDinboxEvents != null)
              {
                  for (int i = 0; i < collDinboxEvents.size(); i++)
                  {
                      ((DinboxEvent) collDinboxEvents.get(i))
                          .setProjectId(v);
                  }
              }
                                                              
              // update associated DoutboxEvent
              if (collDoutboxEvents != null)
              {
                  for (int i = 0; i < collDoutboxEvents.size(); i++)
                  {
                      ((DoutboxEvent) collDoutboxEvents.get(i))
                          .setProjectId(v);
                  }
              }
                                                              
              // update associated Dnewsletter
              if (collDnewsletters != null)
              {
                  for (int i = 0; i < collDnewsletters.size(); i++)
                  {
                      ((Dnewsletter) collDnewsletters.get(i))
                          .setProjectId(v);
                  }
              }
                                   }


        /**
         * Get the ProjectCode
         *
         * @return String
         */
        public String getProjectCode()
        {
            return project_code;
        }

                                            
        /**
         * Set the value of ProjectCode
         *
         * @param v new value
         */
        public void setProjectCode(String v) 
        {
          


         if (!ObjectUtils.equals(this.project_code, v))
        {
             this.project_code = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Status
         *
         * @return int
         */
        public int getStatus()
        {
            return status;
        }

                                            
        /**
         * Set the value of Status
         *
         * @param v new value
         */
        public void setStatus(int v) 
        {
          


         if (this.status != v)
        {
             this.status = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the ProjectCatId
         *
         * @return int
         */
        public int getProjectCatId()
        {
            return project_cat_id;
        }

                                                      
        /**
         * Set the value of ProjectCatId
         *
         * @param v new value
         */
        public void setProjectCatId(int v) throws TorqueException
        {
          


         if (this.project_cat_id != v)
        {
             this.project_cat_id = v;
            setModified(true);
        }

                                          
                if (aProjectCategory != null && !(aProjectCategory.getProjectCatId()==v))
                {
            aProjectCategory = null;
        }
          
                       }


        /**
         * Get the ProjectName
         *
         * @return String
         */
        public String getProjectName()
        {
            return project_name;
        }

                                            
        /**
         * Set the value of ProjectName
         *
         * @param v new value
         */
        public void setProjectName(String v) 
        {
          


         if (!ObjectUtils.equals(this.project_name, v))
        {
             this.project_name = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the StartDate
         *
         * @return Date
         */
        public Date getStartDate()
        {
            return start_date;
        }

                                            
        /**
         * Set the value of StartDate
         *
         * @param v new value
         */
        public void setStartDate(Date v) 
        {
          


         if (!ObjectUtils.equals(this.start_date, v))
        {
             this.start_date = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the EndDate
         *
         * @return Date
         */
        public Date getEndDate()
        {
            return end_date;
        }

                                            
        /**
         * Set the value of EndDate
         *
         * @param v new value
         */
        public void setEndDate(Date v) 
        {
          


         if (!ObjectUtils.equals(this.end_date, v))
        {
             this.end_date = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Expenses
         *
         * @return BigDecimal
         */
        public BigDecimal getExpenses()
        {
            return expenses;
        }

                                            
        /**
         * Set the value of Expenses
         *
         * @param v new value
         */
        public void setExpenses(BigDecimal v) 
        {
          


         if (!ObjectUtils.equals(this.expenses, v))
        {
             this.expenses = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Revenues
         *
         * @return BigDecimal
         */
        public BigDecimal getRevenues()
        {
            return revenues;
        }

                                            
        /**
         * Set the value of Revenues
         *
         * @param v new value
         */
        public void setRevenues(BigDecimal v) 
        {
          


         if (!ObjectUtils.equals(this.revenues, v))
        {
             this.revenues = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Custom1
         *
         * @return String
         */
        public String getCustom1()
        {
            return custom_1;
        }

                                            
        /**
         * Set the value of Custom1
         *
         * @param v new value
         */
        public void setCustom1(String v) 
        {
          


         if (!ObjectUtils.equals(this.custom_1, v))
        {
             this.custom_1 = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Custom2
         *
         * @return String
         */
        public String getCustom2()
        {
            return custom_2;
        }

                                            
        /**
         * Set the value of Custom2
         *
         * @param v new value
         */
        public void setCustom2(String v) 
        {
          


         if (!ObjectUtils.equals(this.custom_2, v))
        {
             this.custom_2 = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Custom3
         *
         * @return String
         */
        public String getCustom3()
        {
            return custom_3;
        }

                                            
        /**
         * Set the value of Custom3
         *
         * @param v new value
         */
        public void setCustom3(String v) 
        {
          


         if (!ObjectUtils.equals(this.custom_3, v))
        {
             this.custom_3 = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Custom4
         *
         * @return String
         */
        public String getCustom4()
        {
            return custom_4;
        }

                                            
        /**
         * Set the value of Custom4
         *
         * @param v new value
         */
        public void setCustom4(String v) 
        {
          


         if (!ObjectUtils.equals(this.custom_4, v))
        {
             this.custom_4 = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Custom5
         *
         * @return String
         */
        public String getCustom5()
        {
            return custom_5;
        }

                                            
        /**
         * Set the value of Custom5
         *
         * @param v new value
         */
        public void setCustom5(String v) 
        {
          


         if (!ObjectUtils.equals(this.custom_5, v))
        {
             this.custom_5 = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Custom6
         *
         * @return String
         */
        public String getCustom6()
        {
            return custom_6;
        }

                                            
        /**
         * Set the value of Custom6
         *
         * @param v new value
         */
        public void setCustom6(String v) 
        {
          


         if (!ObjectUtils.equals(this.custom_6, v))
        {
             this.custom_6 = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Notes
         *
         * @return String
         */
        public String getNotes()
        {
            return notes;
        }

                                            
        /**
         * Set the value of Notes
         *
         * @param v new value
         */
        public void setNotes(String v) 
        {
          


         if (!ObjectUtils.equals(this.notes, v))
        {
             this.notes = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Created
         *
         * @return Date
         */
        public Date getCreated()
        {
            return created;
        }

                                            
        /**
         * Set the value of Created
         *
         * @param v new value
         */
        public void setCreated(Date v) 
        {
          


         if (!ObjectUtils.equals(this.created, v))
        {
             this.created = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Modified
         *
         * @return Date
         */
        public Date getModified()
        {
            return modified;
        }

                                            
        /**
         * Set the value of Modified
         *
         * @param v new value
         */
        public void setModified(Date v) 
        {
          


         if (!ObjectUtils.equals(this.modified, v))
        {
             this.modified = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the CreatedBy
         *
         * @return String
         */
        public String getCreatedBy()
        {
            return created_by;
        }

                                            
        /**
         * Set the value of CreatedBy
         *
         * @param v new value
         */
        public void setCreatedBy(String v) 
        {
          


         if (!ObjectUtils.equals(this.created_by, v))
        {
             this.created_by = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the ModifiedBy
         *
         * @return String
         */
        public String getModifiedBy()
        {
            return modified_by;
        }

                                            
        /**
         * Set the value of ModifiedBy
         *
         * @param v new value
         */
        public void setModifiedBy(String v) 
        {
          


         if (!ObjectUtils.equals(this.modified_by, v))
        {
             this.modified_by = v;
            setModified(true);
        }

                  
                       }


 
     
   
             
   
       private ProjectCategory aProjectCategory;

    /**
     * Declares an association between this object and a ProjectCategory object
     *
     * @param v ProjectCategory
     * @throws TorqueException
     */
    public void setProjectCategory(ProjectCategory v) throws TorqueException
    {
           if (v == null)
        {
                        setProjectCatId(1000);
                    }
        else
        {
            setProjectCatId(v.getProjectCatId());
        }
           aProjectCategory = v;
    }

                 
    /**
     * Get the associated ProjectCategory object
     *
     * @return the associated ProjectCategory object
     * @throws TorqueException
     */
    public ProjectCategory getProjectCategory() throws TorqueException
    {
        if (aProjectCategory == null && (this.project_cat_id > 0))
        {
              aProjectCategory = ProjectCategoryPeer.retrieveByPK(SimpleKey.keyFor(this.project_cat_id));
      
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               ProjectCategory obj = ProjectCategoryPeer.retrieveByPK(this.project_cat_id);
               obj.addProjects(this);
             */
        }
        return aProjectCategory;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setProjectCategoryKey(ObjectKey key) throws TorqueException
    {
    
                                        setProjectCatId(((NumberKey) key).intValue());
                    }
    
                
      
    /**
     * Collection to store aggregation of collDcontracts
     */
    protected List collDcontracts;

    /**
     * Temporary storage of collDcontracts to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initDcontracts()
    {
        if (collDcontracts == null)
        {
            collDcontracts = new ArrayList();
        }
    }

    /**
     * Method called to associate a Dcontract object to this object
     * through the Dcontract foreign key attribute
     *
     * @param l Dcontract
     * @throws TorqueException
     */
    public void addDcontract(Dcontract l) throws TorqueException
    {
        getDcontracts().add(l);
        l.setProject((Project) this);
    }

    /**
     * The criteria used to select the current contents of collDcontracts
     */
    private Criteria lastDcontractsCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDcontracts(new Criteria())
     *
     * @throws TorqueException
     */
    public List getDcontracts() throws TorqueException
    {
        if (collDcontracts == null)
        {
            collDcontracts = getDcontracts(new Criteria(10));
        }
        return collDcontracts;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related Dcontracts from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getDcontracts(Criteria criteria) throws TorqueException
    {
        if (collDcontracts == null)
        {
            if (isNew())
            {
               collDcontracts = new ArrayList();
            }
            else
            {
                   criteria.add(DcontractPeer.PROJECT_ID, getProjectId() );
                   collDcontracts = DcontractPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(DcontractPeer.PROJECT_ID, getProjectId());
                   if (!lastDcontractsCriteria.equals(criteria))
                {
                    collDcontracts = DcontractPeer.doSelect(criteria);
                }
            }
        }
        lastDcontractsCriteria = criteria;

        return collDcontracts;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDcontracts(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDcontracts(Connection con) throws TorqueException
    {
        if (collDcontracts == null)
        {
            collDcontracts = getDcontracts(new Criteria(10), con);
        }
        return collDcontracts;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related Dcontracts from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDcontracts(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collDcontracts == null)
        {
            if (isNew())
            {
               collDcontracts = new ArrayList();
            }
            else
            {
                     criteria.add(DcontractPeer.PROJECT_ID, getProjectId());
                     collDcontracts = DcontractPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(DcontractPeer.PROJECT_ID, getProjectId());
                     if (!lastDcontractsCriteria.equals(criteria))
                 {
                     collDcontracts = DcontractPeer.doSelect(criteria, con);
                 }
             }
         }
         lastDcontractsCriteria = criteria;

         return collDcontracts;
     }

    

     
      
      
          
                    
                
        
        
    
      
         
          
                    
                
        
        
      



             
      
    /**
     * Collection to store aggregation of collDorders
     */
    protected List collDorders;

    /**
     * Temporary storage of collDorders to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initDorders()
    {
        if (collDorders == null)
        {
            collDorders = new ArrayList();
        }
    }

    /**
     * Method called to associate a Dorder object to this object
     * through the Dorder foreign key attribute
     *
     * @param l Dorder
     * @throws TorqueException
     */
    public void addDorder(Dorder l) throws TorqueException
    {
        getDorders().add(l);
        l.setProject((Project) this);
    }

    /**
     * The criteria used to select the current contents of collDorders
     */
    private Criteria lastDordersCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDorders(new Criteria())
     *
     * @throws TorqueException
     */
    public List getDorders() throws TorqueException
    {
        if (collDorders == null)
        {
            collDorders = getDorders(new Criteria(10));
        }
        return collDorders;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related Dorders from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getDorders(Criteria criteria) throws TorqueException
    {
        if (collDorders == null)
        {
            if (isNew())
            {
               collDorders = new ArrayList();
            }
            else
            {
                   criteria.add(DorderPeer.PROJECT_ID, getProjectId() );
                   collDorders = DorderPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(DorderPeer.PROJECT_ID, getProjectId());
                   if (!lastDordersCriteria.equals(criteria))
                {
                    collDorders = DorderPeer.doSelect(criteria);
                }
            }
        }
        lastDordersCriteria = criteria;

        return collDorders;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDorders(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDorders(Connection con) throws TorqueException
    {
        if (collDorders == null)
        {
            collDorders = getDorders(new Criteria(10), con);
        }
        return collDorders;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related Dorders from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDorders(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collDorders == null)
        {
            if (isNew())
            {
               collDorders = new ArrayList();
            }
            else
            {
                     criteria.add(DorderPeer.PROJECT_ID, getProjectId());
                     collDorders = DorderPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(DorderPeer.PROJECT_ID, getProjectId());
                     if (!lastDordersCriteria.equals(criteria))
                 {
                     collDorders = DorderPeer.doSelect(criteria, con);
                 }
             }
         }
         lastDordersCriteria = criteria;

         return collDorders;
     }

      

     
      
      
          
                    
                
        
        
    
      
      
          
                    
                
        
        
    
      
         
          
                    
                
        
        
    
      
      
          
                    
                
        
        
      



             
      
    /**
     * Collection to store aggregation of collDinboxEvents
     */
    protected List collDinboxEvents;

    /**
     * Temporary storage of collDinboxEvents to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initDinboxEvents()
    {
        if (collDinboxEvents == null)
        {
            collDinboxEvents = new ArrayList();
        }
    }

    /**
     * Method called to associate a DinboxEvent object to this object
     * through the DinboxEvent foreign key attribute
     *
     * @param l DinboxEvent
     * @throws TorqueException
     */
    public void addDinboxEvent(DinboxEvent l) throws TorqueException
    {
        getDinboxEvents().add(l);
        l.setProject((Project) this);
    }

    /**
     * The criteria used to select the current contents of collDinboxEvents
     */
    private Criteria lastDinboxEventsCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDinboxEvents(new Criteria())
     *
     * @throws TorqueException
     */
    public List getDinboxEvents() throws TorqueException
    {
        if (collDinboxEvents == null)
        {
            collDinboxEvents = getDinboxEvents(new Criteria(10));
        }
        return collDinboxEvents;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related DinboxEvents from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getDinboxEvents(Criteria criteria) throws TorqueException
    {
        if (collDinboxEvents == null)
        {
            if (isNew())
            {
               collDinboxEvents = new ArrayList();
            }
            else
            {
                   criteria.add(DinboxEventPeer.PROJECT_ID, getProjectId() );
                   collDinboxEvents = DinboxEventPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(DinboxEventPeer.PROJECT_ID, getProjectId());
                   if (!lastDinboxEventsCriteria.equals(criteria))
                {
                    collDinboxEvents = DinboxEventPeer.doSelect(criteria);
                }
            }
        }
        lastDinboxEventsCriteria = criteria;

        return collDinboxEvents;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDinboxEvents(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDinboxEvents(Connection con) throws TorqueException
    {
        if (collDinboxEvents == null)
        {
            collDinboxEvents = getDinboxEvents(new Criteria(10), con);
        }
        return collDinboxEvents;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related DinboxEvents from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDinboxEvents(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collDinboxEvents == null)
        {
            if (isNew())
            {
               collDinboxEvents = new ArrayList();
            }
            else
            {
                     criteria.add(DinboxEventPeer.PROJECT_ID, getProjectId());
                     collDinboxEvents = DinboxEventPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(DinboxEventPeer.PROJECT_ID, getProjectId());
                     if (!lastDinboxEventsCriteria.equals(criteria))
                 {
                     collDinboxEvents = DinboxEventPeer.doSelect(criteria, con);
                 }
             }
         }
         lastDinboxEventsCriteria = criteria;

         return collDinboxEvents;
     }

     

     
      
      
          
                    
                
        
        
    
      
         
          
                    
                
        
        
    
      
      
          
                    
                
        
        
      



             
      
    /**
     * Collection to store aggregation of collDoutboxEvents
     */
    protected List collDoutboxEvents;

    /**
     * Temporary storage of collDoutboxEvents to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initDoutboxEvents()
    {
        if (collDoutboxEvents == null)
        {
            collDoutboxEvents = new ArrayList();
        }
    }

    /**
     * Method called to associate a DoutboxEvent object to this object
     * through the DoutboxEvent foreign key attribute
     *
     * @param l DoutboxEvent
     * @throws TorqueException
     */
    public void addDoutboxEvent(DoutboxEvent l) throws TorqueException
    {
        getDoutboxEvents().add(l);
        l.setProject((Project) this);
    }

    /**
     * The criteria used to select the current contents of collDoutboxEvents
     */
    private Criteria lastDoutboxEventsCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDoutboxEvents(new Criteria())
     *
     * @throws TorqueException
     */
    public List getDoutboxEvents() throws TorqueException
    {
        if (collDoutboxEvents == null)
        {
            collDoutboxEvents = getDoutboxEvents(new Criteria(10));
        }
        return collDoutboxEvents;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related DoutboxEvents from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getDoutboxEvents(Criteria criteria) throws TorqueException
    {
        if (collDoutboxEvents == null)
        {
            if (isNew())
            {
               collDoutboxEvents = new ArrayList();
            }
            else
            {
                   criteria.add(DoutboxEventPeer.PROJECT_ID, getProjectId() );
                   collDoutboxEvents = DoutboxEventPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(DoutboxEventPeer.PROJECT_ID, getProjectId());
                   if (!lastDoutboxEventsCriteria.equals(criteria))
                {
                    collDoutboxEvents = DoutboxEventPeer.doSelect(criteria);
                }
            }
        }
        lastDoutboxEventsCriteria = criteria;

        return collDoutboxEvents;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDoutboxEvents(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDoutboxEvents(Connection con) throws TorqueException
    {
        if (collDoutboxEvents == null)
        {
            collDoutboxEvents = getDoutboxEvents(new Criteria(10), con);
        }
        return collDoutboxEvents;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related DoutboxEvents from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDoutboxEvents(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collDoutboxEvents == null)
        {
            if (isNew())
            {
               collDoutboxEvents = new ArrayList();
            }
            else
            {
                     criteria.add(DoutboxEventPeer.PROJECT_ID, getProjectId());
                     collDoutboxEvents = DoutboxEventPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(DoutboxEventPeer.PROJECT_ID, getProjectId());
                     if (!lastDoutboxEventsCriteria.equals(criteria))
                 {
                     collDoutboxEvents = DoutboxEventPeer.doSelect(criteria, con);
                 }
             }
         }
         lastDoutboxEventsCriteria = criteria;

         return collDoutboxEvents;
     }

     

     
      
      
          
                    
                
        
        
    
      
         
          
                    
                
        
        
    
      
      
          
                    
                
        
        
      



             
      
    /**
     * Collection to store aggregation of collDnewsletters
     */
    protected List collDnewsletters;

    /**
     * Temporary storage of collDnewsletters to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initDnewsletters()
    {
        if (collDnewsletters == null)
        {
            collDnewsletters = new ArrayList();
        }
    }

    /**
     * Method called to associate a Dnewsletter object to this object
     * through the Dnewsletter foreign key attribute
     *
     * @param l Dnewsletter
     * @throws TorqueException
     */
    public void addDnewsletter(Dnewsletter l) throws TorqueException
    {
        getDnewsletters().add(l);
        l.setProject((Project) this);
    }

    /**
     * The criteria used to select the current contents of collDnewsletters
     */
    private Criteria lastDnewslettersCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDnewsletters(new Criteria())
     *
     * @throws TorqueException
     */
    public List getDnewsletters() throws TorqueException
    {
        if (collDnewsletters == null)
        {
            collDnewsletters = getDnewsletters(new Criteria(10));
        }
        return collDnewsletters;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related Dnewsletters from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getDnewsletters(Criteria criteria) throws TorqueException
    {
        if (collDnewsletters == null)
        {
            if (isNew())
            {
               collDnewsletters = new ArrayList();
            }
            else
            {
                   criteria.add(DnewsletterPeer.PROJECT_ID, getProjectId() );
                   collDnewsletters = DnewsletterPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(DnewsletterPeer.PROJECT_ID, getProjectId());
                   if (!lastDnewslettersCriteria.equals(criteria))
                {
                    collDnewsletters = DnewsletterPeer.doSelect(criteria);
                }
            }
        }
        lastDnewslettersCriteria = criteria;

        return collDnewsletters;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDnewsletters(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDnewsletters(Connection con) throws TorqueException
    {
        if (collDnewsletters == null)
        {
            collDnewsletters = getDnewsletters(new Criteria(10), con);
        }
        return collDnewsletters;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Project has previously
     * been saved, it will retrieve related Dnewsletters from storage.
     * If this Project is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDnewsletters(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collDnewsletters == null)
        {
            if (isNew())
            {
               collDnewsletters = new ArrayList();
            }
            else
            {
                     criteria.add(DnewsletterPeer.PROJECT_ID, getProjectId());
                     collDnewsletters = DnewsletterPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(DnewsletterPeer.PROJECT_ID, getProjectId());
                     if (!lastDnewslettersCriteria.equals(criteria))
                 {
                     collDnewsletters = DnewsletterPeer.doSelect(criteria, con);
                 }
             }
         }
         lastDnewslettersCriteria = criteria;

         return collDnewsletters;
     }

        

     
      
      
          
                    
                
        
        
    
      
         
          
                    
                
        
        
    
      
      
          
                    
                
        
        
    
      
      
          
                    
                
        
        
    
      
      
              
                            
                
        
        
    
      
      
              
                            
                
        
        
      



     
    
     


    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
             save(ProjectPeer.getMapBuilder()
                .getDatabaseMap().getName());
     }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
         try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }

     }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
      {
        alreadyInSave = true;



  
        // If this object has been modified, then save it to the database.
        if (isModified())
        {
            if (isNew())
            {
                ProjectPeer.doInsert((Project) this, con);
                setNew(false);
            }
            else
            {
                ProjectPeer.doUpdate((Project) this, con);
            }
        }

                                    
                
          if (collDcontracts != null)
          {
              for (int i = 0; i < collDcontracts.size(); i++)
              {
                  ((Dcontract) collDcontracts.get(i)).save(con);
              }
          }
                                        
                
          if (collDorders != null)
          {
              for (int i = 0; i < collDorders.size(); i++)
              {
                  ((Dorder) collDorders.get(i)).save(con);
              }
          }
                                        
                
          if (collDinboxEvents != null)
          {
              for (int i = 0; i < collDinboxEvents.size(); i++)
              {
                  ((DinboxEvent) collDinboxEvents.get(i)).save(con);
              }
          }
                                        
                
          if (collDoutboxEvents != null)
          {
              for (int i = 0; i < collDoutboxEvents.size(); i++)
              {
                  ((DoutboxEvent) collDoutboxEvents.get(i)).save(con);
              }
          }
                                        
                
          if (collDnewsletters != null)
          {
              for (int i = 0; i < collDnewsletters.size(); i++)
              {
                  ((Dnewsletter) collDnewsletters.get(i)).save(con);
              }
          }
                  alreadyInSave = false;
      }
      }


                        
    
    

        /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param  project_id ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
                    setProjectId(((NumberKey) key).intValue());
            }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
                    setProjectId(Integer.parseInt(key));
            }


    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        return SimpleKey.keyFor(getProjectId());
    }

 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public Project copy() throws TorqueException
    {
        return copyInto(new Project());
    }

    protected Project copyInto(Project copyObj) throws TorqueException
    {
        copyObj.setProjectId(project_id);
        copyObj.setProjectCode(project_code);
        copyObj.setStatus(status);
        copyObj.setProjectCatId(project_cat_id);
        copyObj.setProjectName(project_name);
        copyObj.setStartDate(start_date);
        copyObj.setEndDate(end_date);
        copyObj.setExpenses(expenses);
        copyObj.setRevenues(revenues);
        copyObj.setCustom1(custom_1);
        copyObj.setCustom2(custom_2);
        copyObj.setCustom3(custom_3);
        copyObj.setCustom4(custom_4);
        copyObj.setCustom5(custom_5);
        copyObj.setCustom6(custom_6);
        copyObj.setNotes(notes);
        copyObj.setCreated(created);
        copyObj.setModified(modified);
        copyObj.setCreatedBy(created_by);
        copyObj.setModifiedBy(modified_by);

  copyObj.setNew(false);
                                    
                
        List v = getDcontracts();
        for (int i = 0; i < v.size(); i++)
        {
            Dcontract obj = (Dcontract) v.get(i);
            copyObj.addDcontract(obj.copy());
            ((Persistent) v.get(i)).setNew(true);
        }
                                              
                
        v = getDorders();
        for (int i = 0; i < v.size(); i++)
        {
            Dorder obj = (Dorder) v.get(i);
            copyObj.addDorder(obj.copy());
            ((Persistent) v.get(i)).setNew(true);
        }
                                              
                
        v = getDinboxEvents();
        for (int i = 0; i < v.size(); i++)
        {
            DinboxEvent obj = (DinboxEvent) v.get(i);
            copyObj.addDinboxEvent(obj.copy());
            ((Persistent) v.get(i)).setNew(true);
        }
                                              
                
        v = getDoutboxEvents();
        for (int i = 0; i < v.size(); i++)
        {
            DoutboxEvent obj = (DoutboxEvent) v.get(i);
            copyObj.addDoutboxEvent(obj.copy());
            ((Persistent) v.get(i)).setNew(true);
        }
                                              
                
        v = getDnewsletters();
        for (int i = 0; i < v.size(); i++)
        {
            Dnewsletter obj = (Dnewsletter) v.get(i);
            copyObj.addDnewsletter(obj.copy());
            ((Persistent) v.get(i)).setNew(true);
        }
                copyObj.setNew(true);

                      copyObj.setProjectId(0);
                                                                                                return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public ProjectPeer getPeer()
    {
        return peer;
    }
}
