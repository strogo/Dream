package org.campware.dream.om;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Date;
import java.util.Collections;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;

   
      
      
   
/**
 * This class was autogenerated by Torque on:
 *
 * [Thu Jul 29 08:38:49 CEST 2004]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to DinboxEvent
 */
public abstract class BaseDinboxEvent extends BaseObject
{
    /** The Peer class */
    private static final DinboxEventPeer peer =
        new DinboxEventPeer();

                  
        /**
         * The value for the dinbox_event_id field
         */
        private int dinbox_event_id;
                                                                                      
        /**
         * The value for the dinbox_event_code field
         */
        private String dinbox_event_code = "AUTO";
                                                                            
        /**
         * The value for the status field
         */
        private int status = 30;
                                                                            
        /**
         * The value for the priority field
         */
        private int priority = 30;
              
        /**
         * The value for the issued_date field
         */
        private Date issued_date;
              
        /**
         * The value for the closed_date field
         */
        private Date closed_date;
              
        /**
         * The value for the received_time field
         */
        private Date received_time;
              
        /**
         * The value for the sent_time field
         */
        private Date sent_time;
                                                                            
        /**
         * The value for the event_channel field
         */
        private int event_channel = 20;
                                                                            
        /**
         * The value for the event_type field
         */
        private int event_type = 30;
                                                                            
        /**
         * The value for the email_format field
         */
        private int email_format = 10;
                                                                            
        /**
         * The value for the distributor_id field
         */
        private int distributor_id = 1000;
                                                                            
        /**
         * The value for the project_id field
         */
        private int project_id = 1000;
                                                                            
        /**
         * The value for the product_id field
         */
        private int product_id = 1000;
              
        /**
         * The value for the sender field
         */
        private String sender;
              
        /**
         * The value for the subject field
         */
        private String subject;
              
        /**
         * The value for the body field
         */
        private String body;
              
        /**
         * The value for the notes field
         */
        private String notes;
              
        /**
         * The value for the created field
         */
        private Date created;
              
        /**
         * The value for the modified field
         */
        private Date modified;
              
        /**
         * The value for the created_by field
         */
        private String created_by;
              
        /**
         * The value for the modified_by field
         */
        private String modified_by;
      
      
        /**
         * Get the DinboxEventId
         *
         * @return int
         */
        public int getDinboxEventId()
        {
            return dinbox_event_id;
        }

                                            
        /**
         * Set the value of DinboxEventId
         *
         * @param v new value
         */
        public void setDinboxEventId(int v) 
        {
          


         if (this.dinbox_event_id != v)
        {
             this.dinbox_event_id = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the DinboxEventCode
         *
         * @return String
         */
        public String getDinboxEventCode()
        {
            return dinbox_event_code;
        }

                                            
        /**
         * Set the value of DinboxEventCode
         *
         * @param v new value
         */
        public void setDinboxEventCode(String v) 
        {
          


         if (!ObjectUtils.equals(this.dinbox_event_code, v))
        {
             this.dinbox_event_code = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Status
         *
         * @return int
         */
        public int getStatus()
        {
            return status;
        }

                                            
        /**
         * Set the value of Status
         *
         * @param v new value
         */
        public void setStatus(int v) 
        {
          


         if (this.status != v)
        {
             this.status = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Priority
         *
         * @return int
         */
        public int getPriority()
        {
            return priority;
        }

                                            
        /**
         * Set the value of Priority
         *
         * @param v new value
         */
        public void setPriority(int v) 
        {
          


         if (this.priority != v)
        {
             this.priority = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the IssuedDate
         *
         * @return Date
         */
        public Date getIssuedDate()
        {
            return issued_date;
        }

                                            
        /**
         * Set the value of IssuedDate
         *
         * @param v new value
         */
        public void setIssuedDate(Date v) 
        {
          


         if (!ObjectUtils.equals(this.issued_date, v))
        {
             this.issued_date = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the ClosedDate
         *
         * @return Date
         */
        public Date getClosedDate()
        {
            return closed_date;
        }

                                            
        /**
         * Set the value of ClosedDate
         *
         * @param v new value
         */
        public void setClosedDate(Date v) 
        {
          


         if (!ObjectUtils.equals(this.closed_date, v))
        {
             this.closed_date = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the ReceivedTime
         *
         * @return Date
         */
        public Date getReceivedTime()
        {
            return received_time;
        }

                                            
        /**
         * Set the value of ReceivedTime
         *
         * @param v new value
         */
        public void setReceivedTime(Date v) 
        {
          


         if (!ObjectUtils.equals(this.received_time, v))
        {
             this.received_time = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the SentTime
         *
         * @return Date
         */
        public Date getSentTime()
        {
            return sent_time;
        }

                                            
        /**
         * Set the value of SentTime
         *
         * @param v new value
         */
        public void setSentTime(Date v) 
        {
          


         if (!ObjectUtils.equals(this.sent_time, v))
        {
             this.sent_time = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the EventChannel
         *
         * @return int
         */
        public int getEventChannel()
        {
            return event_channel;
        }

                                            
        /**
         * Set the value of EventChannel
         *
         * @param v new value
         */
        public void setEventChannel(int v) 
        {
          


         if (this.event_channel != v)
        {
             this.event_channel = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the EventType
         *
         * @return int
         */
        public int getEventType()
        {
            return event_type;
        }

                                            
        /**
         * Set the value of EventType
         *
         * @param v new value
         */
        public void setEventType(int v) 
        {
          


         if (this.event_type != v)
        {
             this.event_type = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the EmailFormat
         *
         * @return int
         */
        public int getEmailFormat()
        {
            return email_format;
        }

                                            
        /**
         * Set the value of EmailFormat
         *
         * @param v new value
         */
        public void setEmailFormat(int v) 
        {
          


         if (this.email_format != v)
        {
             this.email_format = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the DistributorId
         *
         * @return int
         */
        public int getDistributorId()
        {
            return distributor_id;
        }

                                                      
        /**
         * Set the value of DistributorId
         *
         * @param v new value
         */
        public void setDistributorId(int v) throws TorqueException
        {
          


         if (this.distributor_id != v)
        {
             this.distributor_id = v;
            setModified(true);
        }

                                          
                if (aDistributor != null && !(aDistributor.getDistributorId()==v))
                {
            aDistributor = null;
        }
          
                       }


        /**
         * Get the ProjectId
         *
         * @return int
         */
        public int getProjectId()
        {
            return project_id;
        }

                                                      
        /**
         * Set the value of ProjectId
         *
         * @param v new value
         */
        public void setProjectId(int v) throws TorqueException
        {
          


         if (this.project_id != v)
        {
             this.project_id = v;
            setModified(true);
        }

                                          
                if (aProject != null && !(aProject.getProjectId()==v))
                {
            aProject = null;
        }
          
                       }


        /**
         * Get the ProductId
         *
         * @return int
         */
        public int getProductId()
        {
            return product_id;
        }

                                                      
        /**
         * Set the value of ProductId
         *
         * @param v new value
         */
        public void setProductId(int v) throws TorqueException
        {
          


         if (this.product_id != v)
        {
             this.product_id = v;
            setModified(true);
        }

                                          
                if (aProduct != null && !(aProduct.getProductId()==v))
                {
            aProduct = null;
        }
          
                       }


        /**
         * Get the Sender
         *
         * @return String
         */
        public String getSender()
        {
            return sender;
        }

                                            
        /**
         * Set the value of Sender
         *
         * @param v new value
         */
        public void setSender(String v) 
        {
          


         if (!ObjectUtils.equals(this.sender, v))
        {
             this.sender = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Subject
         *
         * @return String
         */
        public String getSubject()
        {
            return subject;
        }

                                            
        /**
         * Set the value of Subject
         *
         * @param v new value
         */
        public void setSubject(String v) 
        {
          


         if (!ObjectUtils.equals(this.subject, v))
        {
             this.subject = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Body
         *
         * @return String
         */
        public String getBody()
        {
            return body;
        }

                                            
        /**
         * Set the value of Body
         *
         * @param v new value
         */
        public void setBody(String v) 
        {
          


         if (!ObjectUtils.equals(this.body, v))
        {
             this.body = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Notes
         *
         * @return String
         */
        public String getNotes()
        {
            return notes;
        }

                                            
        /**
         * Set the value of Notes
         *
         * @param v new value
         */
        public void setNotes(String v) 
        {
          


         if (!ObjectUtils.equals(this.notes, v))
        {
             this.notes = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Created
         *
         * @return Date
         */
        public Date getCreated()
        {
            return created;
        }

                                            
        /**
         * Set the value of Created
         *
         * @param v new value
         */
        public void setCreated(Date v) 
        {
          


         if (!ObjectUtils.equals(this.created, v))
        {
             this.created = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Modified
         *
         * @return Date
         */
        public Date getModified()
        {
            return modified;
        }

                                            
        /**
         * Set the value of Modified
         *
         * @param v new value
         */
        public void setModified(Date v) 
        {
          


         if (!ObjectUtils.equals(this.modified, v))
        {
             this.modified = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the CreatedBy
         *
         * @return String
         */
        public String getCreatedBy()
        {
            return created_by;
        }

                                            
        /**
         * Set the value of CreatedBy
         *
         * @param v new value
         */
        public void setCreatedBy(String v) 
        {
          


         if (!ObjectUtils.equals(this.created_by, v))
        {
             this.created_by = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the ModifiedBy
         *
         * @return String
         */
        public String getModifiedBy()
        {
            return modified_by;
        }

                                            
        /**
         * Set the value of ModifiedBy
         *
         * @param v new value
         */
        public void setModifiedBy(String v) 
        {
          


         if (!ObjectUtils.equals(this.modified_by, v))
        {
             this.modified_by = v;
            setModified(true);
        }

                  
                       }


 
     
   
             
   
       private Distributor aDistributor;

    /**
     * Declares an association between this object and a Distributor object
     *
     * @param v Distributor
     * @throws TorqueException
     */
    public void setDistributor(Distributor v) throws TorqueException
    {
           if (v == null)
        {
                        setDistributorId(1000);
                    }
        else
        {
            setDistributorId(v.getDistributorId());
        }
           aDistributor = v;
    }

                 
    /**
     * Get the associated Distributor object
     *
     * @return the associated Distributor object
     * @throws TorqueException
     */
    public Distributor getDistributor() throws TorqueException
    {
        if (aDistributor == null && (this.distributor_id > 0))
        {
              aDistributor = DistributorPeer.retrieveByPK(SimpleKey.keyFor(this.distributor_id));
      
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Distributor obj = DistributorPeer.retrieveByPK(this.distributor_id);
               obj.addDinboxEvents(this);
             */
        }
        return aDistributor;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setDistributorKey(ObjectKey key) throws TorqueException
    {
    
                                        setDistributorId(((NumberKey) key).intValue());
                    }
 
   
             
   
       private Project aProject;

    /**
     * Declares an association between this object and a Project object
     *
     * @param v Project
     * @throws TorqueException
     */
    public void setProject(Project v) throws TorqueException
    {
           if (v == null)
        {
                        setProjectId(1000);
                    }
        else
        {
            setProjectId(v.getProjectId());
        }
           aProject = v;
    }

                 
    /**
     * Get the associated Project object
     *
     * @return the associated Project object
     * @throws TorqueException
     */
    public Project getProject() throws TorqueException
    {
        if (aProject == null && (this.project_id > 0))
        {
              aProject = ProjectPeer.retrieveByPK(SimpleKey.keyFor(this.project_id));
      
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Project obj = ProjectPeer.retrieveByPK(this.project_id);
               obj.addDinboxEvents(this);
             */
        }
        return aProject;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setProjectKey(ObjectKey key) throws TorqueException
    {
    
                                        setProjectId(((NumberKey) key).intValue());
                    }
 
   
             
   
       private Product aProduct;

    /**
     * Declares an association between this object and a Product object
     *
     * @param v Product
     * @throws TorqueException
     */
    public void setProduct(Product v) throws TorqueException
    {
           if (v == null)
        {
                        setProductId(1000);
                    }
        else
        {
            setProductId(v.getProductId());
        }
           aProduct = v;
    }

                 
    /**
     * Get the associated Product object
     *
     * @return the associated Product object
     * @throws TorqueException
     */
    public Product getProduct() throws TorqueException
    {
        if (aProduct == null && (this.product_id > 0))
        {
              aProduct = ProductPeer.retrieveByPK(SimpleKey.keyFor(this.product_id));
      
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Product obj = ProductPeer.retrieveByPK(this.product_id);
               obj.addDinboxEvents(this);
             */
        }
        return aProduct;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setProductKey(ObjectKey key) throws TorqueException
    {
    
                                        setProductId(((NumberKey) key).intValue());
                    }
    
        
    
     


    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
             save(DinboxEventPeer.getMapBuilder()
                .getDatabaseMap().getName());
     }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
         try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }

     }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
      {
        alreadyInSave = true;



  
        // If this object has been modified, then save it to the database.
        if (isModified())
        {
            if (isNew())
            {
                DinboxEventPeer.doInsert((DinboxEvent) this, con);
                setNew(false);
            }
            else
            {
                DinboxEventPeer.doUpdate((DinboxEvent) this, con);
            }
        }

              alreadyInSave = false;
      }
      }


                
    
    

        /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param  dinbox_event_id ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        
    {
                    setDinboxEventId(((NumberKey) key).intValue());
            }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) 
    {
                    setDinboxEventId(Integer.parseInt(key));
            }


    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        return SimpleKey.keyFor(getDinboxEventId());
    }

 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public DinboxEvent copy() throws TorqueException
    {
        return copyInto(new DinboxEvent());
    }

    protected DinboxEvent copyInto(DinboxEvent copyObj) throws TorqueException
    {
        copyObj.setDinboxEventId(dinbox_event_id);
        copyObj.setDinboxEventCode(dinbox_event_code);
        copyObj.setStatus(status);
        copyObj.setPriority(priority);
        copyObj.setIssuedDate(issued_date);
        copyObj.setClosedDate(closed_date);
        copyObj.setReceivedTime(received_time);
        copyObj.setSentTime(sent_time);
        copyObj.setEventChannel(event_channel);
        copyObj.setEventType(event_type);
        copyObj.setEmailFormat(email_format);
        copyObj.setDistributorId(distributor_id);
        copyObj.setProjectId(project_id);
        copyObj.setProductId(product_id);
        copyObj.setSender(sender);
        copyObj.setSubject(subject);
        copyObj.setBody(body);
        copyObj.setNotes(notes);
        copyObj.setCreated(created);
        copyObj.setModified(modified);
        copyObj.setCreatedBy(created_by);
        copyObj.setModifiedBy(modified_by);

  copyObj.setNew(false);
      copyObj.setNew(true);

                      copyObj.setDinboxEventId(0);
                                                                                                        return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public DinboxEventPeer getPeer()
    {
        return peer;
    }
}
