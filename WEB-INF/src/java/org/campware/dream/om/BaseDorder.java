package org.campware.dream.om;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Date;
import java.util.Collections;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;

   
      
      
      
   
/**
 * This class was autogenerated by Torque on:
 *
 * [Thu Jul 29 08:38:49 CEST 2004]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Dorder
 */
public abstract class BaseDorder extends BaseObject
{
    /** The Peer class */
    private static final DorderPeer peer =
        new DorderPeer();

                  
        /**
         * The value for the dorder_id field
         */
        private int dorder_id;
                                                                                      
        /**
         * The value for the dorder_code field
         */
        private String dorder_code = "AUTO";
                                                                            
        /**
         * The value for the status field
         */
        private int status = 30;
              
        /**
         * The value for the issued_date field
         */
        private Date issued_date;
              
        /**
         * The value for the sales_date field
         */
        private Date sales_date;
              
        /**
         * The value for the expected_time field
         */
        private Date expected_time;
              
        /**
         * The value for the closed_date field
         */
        private Date closed_date;
                                                                            
        /**
         * The value for the distributor_id field
         */
        private int distributor_id = 1000;
                                                                            
        /**
         * The value for the dcontract_id field
         */
        private int dcontract_id = 1000;
                                                                            
        /**
         * The value for the project_id field
         */
        private int project_id = 1000;
                                                                            
        /**
         * The value for the product_id field
         */
        private int product_id = 1000;
              
        /**
         * The value for the description field
         */
        private String description;
                                                                            
        /**
         * The value for the unit_price field
         */
        private double unit_price = 0;
                                                                            
        /**
         * The value for the unit_weight field
         */
        private double unit_weight = 0;
                                                                            
        /**
         * The value for the total_quantity field
         */
        private int total_quantity = 0;
                                                              
        /**
         * The value for the total_amount field
         */
        private BigDecimal total_amount= new BigDecimal(0);
                                                              
        /**
         * The value for the total_weight field
         */
        private BigDecimal total_weight= new BigDecimal(0);
              
        /**
         * The value for the notes field
         */
        private String notes;
              
        /**
         * The value for the created field
         */
        private Date created;
              
        /**
         * The value for the modified field
         */
        private Date modified;
              
        /**
         * The value for the created_by field
         */
        private String created_by;
              
        /**
         * The value for the modified_by field
         */
        private String modified_by;
      
      
        /**
         * Get the DorderId
         *
         * @return int
         */
        public int getDorderId()
        {
            return dorder_id;
        }

                                                                              
        /**
         * Set the value of DorderId
         *
         * @param v new value
         */
        public void setDorderId(int v) throws TorqueException
        {
          


         if (this.dorder_id != v)
        {
             this.dorder_id = v;
            setModified(true);
        }

                  
                                                  
              // update associated DorderItem
              if (collDorderItems != null)
              {
                  for (int i = 0; i < collDorderItems.size(); i++)
                  {
                      ((DorderItem) collDorderItems.get(i))
                          .setDorderId(v);
                  }
              }
                                                              
              // update associated Dshipment
              if (collDshipments != null)
              {
                  for (int i = 0; i < collDshipments.size(); i++)
                  {
                      ((Dshipment) collDshipments.get(i))
                          .setDorderId(v);
                  }
              }
                                                              
              // update associated Dreturn
              if (collDreturns != null)
              {
                  for (int i = 0; i < collDreturns.size(); i++)
                  {
                      ((Dreturn) collDreturns.get(i))
                          .setDorderId(v);
                  }
              }
                                   }


        /**
         * Get the DorderCode
         *
         * @return String
         */
        public String getDorderCode()
        {
            return dorder_code;
        }

                                            
        /**
         * Set the value of DorderCode
         *
         * @param v new value
         */
        public void setDorderCode(String v) 
        {
          


         if (!ObjectUtils.equals(this.dorder_code, v))
        {
             this.dorder_code = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Status
         *
         * @return int
         */
        public int getStatus()
        {
            return status;
        }

                                            
        /**
         * Set the value of Status
         *
         * @param v new value
         */
        public void setStatus(int v) 
        {
          


         if (this.status != v)
        {
             this.status = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the IssuedDate
         *
         * @return Date
         */
        public Date getIssuedDate()
        {
            return issued_date;
        }

                                            
        /**
         * Set the value of IssuedDate
         *
         * @param v new value
         */
        public void setIssuedDate(Date v) 
        {
          


         if (!ObjectUtils.equals(this.issued_date, v))
        {
             this.issued_date = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the SalesDate
         *
         * @return Date
         */
        public Date getSalesDate()
        {
            return sales_date;
        }

                                            
        /**
         * Set the value of SalesDate
         *
         * @param v new value
         */
        public void setSalesDate(Date v) 
        {
          


         if (!ObjectUtils.equals(this.sales_date, v))
        {
             this.sales_date = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the ExpectedTime
         *
         * @return Date
         */
        public Date getExpectedTime()
        {
            return expected_time;
        }

                                            
        /**
         * Set the value of ExpectedTime
         *
         * @param v new value
         */
        public void setExpectedTime(Date v) 
        {
          


         if (!ObjectUtils.equals(this.expected_time, v))
        {
             this.expected_time = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the ClosedDate
         *
         * @return Date
         */
        public Date getClosedDate()
        {
            return closed_date;
        }

                                            
        /**
         * Set the value of ClosedDate
         *
         * @param v new value
         */
        public void setClosedDate(Date v) 
        {
          


         if (!ObjectUtils.equals(this.closed_date, v))
        {
             this.closed_date = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the DistributorId
         *
         * @return int
         */
        public int getDistributorId()
        {
            return distributor_id;
        }

                                                      
        /**
         * Set the value of DistributorId
         *
         * @param v new value
         */
        public void setDistributorId(int v) throws TorqueException
        {
          


         if (this.distributor_id != v)
        {
             this.distributor_id = v;
            setModified(true);
        }

                                          
                if (aDistributor != null && !(aDistributor.getDistributorId()==v))
                {
            aDistributor = null;
        }
          
                       }


        /**
         * Get the DcontractId
         *
         * @return int
         */
        public int getDcontractId()
        {
            return dcontract_id;
        }

                                                      
        /**
         * Set the value of DcontractId
         *
         * @param v new value
         */
        public void setDcontractId(int v) throws TorqueException
        {
          


         if (this.dcontract_id != v)
        {
             this.dcontract_id = v;
            setModified(true);
        }

                                          
                if (aDcontract != null && !(aDcontract.getDcontractId()==v))
                {
            aDcontract = null;
        }
          
                       }


        /**
         * Get the ProjectId
         *
         * @return int
         */
        public int getProjectId()
        {
            return project_id;
        }

                                                      
        /**
         * Set the value of ProjectId
         *
         * @param v new value
         */
        public void setProjectId(int v) throws TorqueException
        {
          


         if (this.project_id != v)
        {
             this.project_id = v;
            setModified(true);
        }

                                          
                if (aProject != null && !(aProject.getProjectId()==v))
                {
            aProject = null;
        }
          
                       }


        /**
         * Get the ProductId
         *
         * @return int
         */
        public int getProductId()
        {
            return product_id;
        }

                                                      
        /**
         * Set the value of ProductId
         *
         * @param v new value
         */
        public void setProductId(int v) throws TorqueException
        {
          


         if (this.product_id != v)
        {
             this.product_id = v;
            setModified(true);
        }

                                          
                if (aProduct != null && !(aProduct.getProductId()==v))
                {
            aProduct = null;
        }
          
                       }


        /**
         * Get the Description
         *
         * @return String
         */
        public String getDescription()
        {
            return description;
        }

                                            
        /**
         * Set the value of Description
         *
         * @param v new value
         */
        public void setDescription(String v) 
        {
          


         if (!ObjectUtils.equals(this.description, v))
        {
             this.description = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the UnitPrice
         *
         * @return double
         */
        public double getUnitPrice()
        {
            return unit_price;
        }

                                            
        /**
         * Set the value of UnitPrice
         *
         * @param v new value
         */
        public void setUnitPrice(double v) 
        {
          


         if (this.unit_price != v)
        {
             this.unit_price = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the UnitWeight
         *
         * @return double
         */
        public double getUnitWeight()
        {
            return unit_weight;
        }

                                            
        /**
         * Set the value of UnitWeight
         *
         * @param v new value
         */
        public void setUnitWeight(double v) 
        {
          


         if (this.unit_weight != v)
        {
             this.unit_weight = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the TotalQuantity
         *
         * @return int
         */
        public int getTotalQuantity()
        {
            return total_quantity;
        }

                                            
        /**
         * Set the value of TotalQuantity
         *
         * @param v new value
         */
        public void setTotalQuantity(int v) 
        {
          


         if (this.total_quantity != v)
        {
             this.total_quantity = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the TotalAmount
         *
         * @return BigDecimal
         */
        public BigDecimal getTotalAmount()
        {
            return total_amount;
        }

                                            
        /**
         * Set the value of TotalAmount
         *
         * @param v new value
         */
        public void setTotalAmount(BigDecimal v) 
        {
          


         if (!ObjectUtils.equals(this.total_amount, v))
        {
             this.total_amount = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the TotalWeight
         *
         * @return BigDecimal
         */
        public BigDecimal getTotalWeight()
        {
            return total_weight;
        }

                                            
        /**
         * Set the value of TotalWeight
         *
         * @param v new value
         */
        public void setTotalWeight(BigDecimal v) 
        {
          


         if (!ObjectUtils.equals(this.total_weight, v))
        {
             this.total_weight = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Notes
         *
         * @return String
         */
        public String getNotes()
        {
            return notes;
        }

                                            
        /**
         * Set the value of Notes
         *
         * @param v new value
         */
        public void setNotes(String v) 
        {
          


         if (!ObjectUtils.equals(this.notes, v))
        {
             this.notes = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Created
         *
         * @return Date
         */
        public Date getCreated()
        {
            return created;
        }

                                            
        /**
         * Set the value of Created
         *
         * @param v new value
         */
        public void setCreated(Date v) 
        {
          


         if (!ObjectUtils.equals(this.created, v))
        {
             this.created = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Modified
         *
         * @return Date
         */
        public Date getModified()
        {
            return modified;
        }

                                            
        /**
         * Set the value of Modified
         *
         * @param v new value
         */
        public void setModified(Date v) 
        {
          


         if (!ObjectUtils.equals(this.modified, v))
        {
             this.modified = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the CreatedBy
         *
         * @return String
         */
        public String getCreatedBy()
        {
            return created_by;
        }

                                            
        /**
         * Set the value of CreatedBy
         *
         * @param v new value
         */
        public void setCreatedBy(String v) 
        {
          


         if (!ObjectUtils.equals(this.created_by, v))
        {
             this.created_by = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the ModifiedBy
         *
         * @return String
         */
        public String getModifiedBy()
        {
            return modified_by;
        }

                                            
        /**
         * Set the value of ModifiedBy
         *
         * @param v new value
         */
        public void setModifiedBy(String v) 
        {
          


         if (!ObjectUtils.equals(this.modified_by, v))
        {
             this.modified_by = v;
            setModified(true);
        }

                  
                       }


 
     
   
             
   
       private Distributor aDistributor;

    /**
     * Declares an association between this object and a Distributor object
     *
     * @param v Distributor
     * @throws TorqueException
     */
    public void setDistributor(Distributor v) throws TorqueException
    {
           if (v == null)
        {
                        setDistributorId(1000);
                    }
        else
        {
            setDistributorId(v.getDistributorId());
        }
           aDistributor = v;
    }

                 
    /**
     * Get the associated Distributor object
     *
     * @return the associated Distributor object
     * @throws TorqueException
     */
    public Distributor getDistributor() throws TorqueException
    {
        if (aDistributor == null && (this.distributor_id > 0))
        {
              aDistributor = DistributorPeer.retrieveByPK(SimpleKey.keyFor(this.distributor_id));
      
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Distributor obj = DistributorPeer.retrieveByPK(this.distributor_id);
               obj.addDorders(this);
             */
        }
        return aDistributor;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setDistributorKey(ObjectKey key) throws TorqueException
    {
    
                                        setDistributorId(((NumberKey) key).intValue());
                    }
 
   
             
   
       private Dcontract aDcontract;

    /**
     * Declares an association between this object and a Dcontract object
     *
     * @param v Dcontract
     * @throws TorqueException
     */
    public void setDcontract(Dcontract v) throws TorqueException
    {
           if (v == null)
        {
                        setDcontractId(1000);
                    }
        else
        {
            setDcontractId(v.getDcontractId());
        }
           aDcontract = v;
    }

                 
    /**
     * Get the associated Dcontract object
     *
     * @return the associated Dcontract object
     * @throws TorqueException
     */
    public Dcontract getDcontract() throws TorqueException
    {
        if (aDcontract == null && (this.dcontract_id > 0))
        {
              aDcontract = DcontractPeer.retrieveByPK(SimpleKey.keyFor(this.dcontract_id));
      
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Dcontract obj = DcontractPeer.retrieveByPK(this.dcontract_id);
               obj.addDorders(this);
             */
        }
        return aDcontract;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setDcontractKey(ObjectKey key) throws TorqueException
    {
    
                                        setDcontractId(((NumberKey) key).intValue());
                    }
 
   
             
   
       private Project aProject;

    /**
     * Declares an association between this object and a Project object
     *
     * @param v Project
     * @throws TorqueException
     */
    public void setProject(Project v) throws TorqueException
    {
           if (v == null)
        {
                        setProjectId(1000);
                    }
        else
        {
            setProjectId(v.getProjectId());
        }
           aProject = v;
    }

                 
    /**
     * Get the associated Project object
     *
     * @return the associated Project object
     * @throws TorqueException
     */
    public Project getProject() throws TorqueException
    {
        if (aProject == null && (this.project_id > 0))
        {
              aProject = ProjectPeer.retrieveByPK(SimpleKey.keyFor(this.project_id));
      
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Project obj = ProjectPeer.retrieveByPK(this.project_id);
               obj.addDorders(this);
             */
        }
        return aProject;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setProjectKey(ObjectKey key) throws TorqueException
    {
    
                                        setProjectId(((NumberKey) key).intValue());
                    }
 
   
             
   
       private Product aProduct;

    /**
     * Declares an association between this object and a Product object
     *
     * @param v Product
     * @throws TorqueException
     */
    public void setProduct(Product v) throws TorqueException
    {
           if (v == null)
        {
                        setProductId(1000);
                    }
        else
        {
            setProductId(v.getProductId());
        }
           aProduct = v;
    }

                 
    /**
     * Get the associated Product object
     *
     * @return the associated Product object
     * @throws TorqueException
     */
    public Product getProduct() throws TorqueException
    {
        if (aProduct == null && (this.product_id > 0))
        {
              aProduct = ProductPeer.retrieveByPK(SimpleKey.keyFor(this.product_id));
      
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Product obj = ProductPeer.retrieveByPK(this.product_id);
               obj.addDorders(this);
             */
        }
        return aProduct;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setProductKey(ObjectKey key) throws TorqueException
    {
    
                                        setProductId(((NumberKey) key).intValue());
                    }
    
                
      
    /**
     * Collection to store aggregation of collDorderItems
     */
    protected List collDorderItems;

    /**
     * Temporary storage of collDorderItems to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initDorderItems()
    {
        if (collDorderItems == null)
        {
            collDorderItems = new ArrayList();
        }
    }

    /**
     * Method called to associate a DorderItem object to this object
     * through the DorderItem foreign key attribute
     *
     * @param l DorderItem
     * @throws TorqueException
     */
    public void addDorderItem(DorderItem l) throws TorqueException
    {
        getDorderItems().add(l);
        l.setDorder((Dorder) this);
    }

    /**
     * The criteria used to select the current contents of collDorderItems
     */
    private Criteria lastDorderItemsCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDorderItems(new Criteria())
     *
     * @throws TorqueException
     */
    public List getDorderItems() throws TorqueException
    {
        if (collDorderItems == null)
        {
            collDorderItems = getDorderItems(new Criteria(10));
        }
        return collDorderItems;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Dorder has previously
     * been saved, it will retrieve related DorderItems from storage.
     * If this Dorder is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getDorderItems(Criteria criteria) throws TorqueException
    {
        if (collDorderItems == null)
        {
            if (isNew())
            {
               collDorderItems = new ArrayList();
            }
            else
            {
                   criteria.add(DorderItemPeer.DORDER_ID, getDorderId() );
                   collDorderItems = DorderItemPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(DorderItemPeer.DORDER_ID, getDorderId());
                   if (!lastDorderItemsCriteria.equals(criteria))
                {
                    collDorderItems = DorderItemPeer.doSelect(criteria);
                }
            }
        }
        lastDorderItemsCriteria = criteria;

        return collDorderItems;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDorderItems(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDorderItems(Connection con) throws TorqueException
    {
        if (collDorderItems == null)
        {
            collDorderItems = getDorderItems(new Criteria(10), con);
        }
        return collDorderItems;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Dorder has previously
     * been saved, it will retrieve related DorderItems from storage.
     * If this Dorder is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDorderItems(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collDorderItems == null)
        {
            if (isNew())
            {
               collDorderItems = new ArrayList();
            }
            else
            {
                     criteria.add(DorderItemPeer.DORDER_ID, getDorderId());
                     collDorderItems = DorderItemPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(DorderItemPeer.DORDER_ID, getDorderId());
                     if (!lastDorderItemsCriteria.equals(criteria))
                 {
                     collDorderItems = DorderItemPeer.doSelect(criteria, con);
                 }
             }
         }
         lastDorderItemsCriteria = criteria;

         return collDorderItems;
     }

    

     
      
         
          
                    
                
        
        
    
      
      
          
                    
                
        
        
      



             
      
    /**
     * Collection to store aggregation of collDshipments
     */
    protected List collDshipments;

    /**
     * Temporary storage of collDshipments to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initDshipments()
    {
        if (collDshipments == null)
        {
            collDshipments = new ArrayList();
        }
    }

    /**
     * Method called to associate a Dshipment object to this object
     * through the Dshipment foreign key attribute
     *
     * @param l Dshipment
     * @throws TorqueException
     */
    public void addDshipment(Dshipment l) throws TorqueException
    {
        getDshipments().add(l);
        l.setDorder((Dorder) this);
    }

    /**
     * The criteria used to select the current contents of collDshipments
     */
    private Criteria lastDshipmentsCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDshipments(new Criteria())
     *
     * @throws TorqueException
     */
    public List getDshipments() throws TorqueException
    {
        if (collDshipments == null)
        {
            collDshipments = getDshipments(new Criteria(10));
        }
        return collDshipments;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Dorder has previously
     * been saved, it will retrieve related Dshipments from storage.
     * If this Dorder is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getDshipments(Criteria criteria) throws TorqueException
    {
        if (collDshipments == null)
        {
            if (isNew())
            {
               collDshipments = new ArrayList();
            }
            else
            {
                   criteria.add(DshipmentPeer.DORDER_ID, getDorderId() );
                   collDshipments = DshipmentPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(DshipmentPeer.DORDER_ID, getDorderId());
                   if (!lastDshipmentsCriteria.equals(criteria))
                {
                    collDshipments = DshipmentPeer.doSelect(criteria);
                }
            }
        }
        lastDshipmentsCriteria = criteria;

        return collDshipments;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDshipments(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDshipments(Connection con) throws TorqueException
    {
        if (collDshipments == null)
        {
            collDshipments = getDshipments(new Criteria(10), con);
        }
        return collDshipments;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Dorder has previously
     * been saved, it will retrieve related Dshipments from storage.
     * If this Dorder is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDshipments(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collDshipments == null)
        {
            if (isNew())
            {
               collDshipments = new ArrayList();
            }
            else
            {
                     criteria.add(DshipmentPeer.DORDER_ID, getDorderId());
                     collDshipments = DshipmentPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(DshipmentPeer.DORDER_ID, getDorderId());
                     if (!lastDshipmentsCriteria.equals(criteria))
                 {
                     collDshipments = DshipmentPeer.doSelect(criteria, con);
                 }
             }
         }
         lastDshipmentsCriteria = criteria;

         return collDshipments;
     }

    

     
      
      
          
                    
                
        
        
    
      
         
          
                    
                
        
        
      



             
      
    /**
     * Collection to store aggregation of collDreturns
     */
    protected List collDreturns;

    /**
     * Temporary storage of collDreturns to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initDreturns()
    {
        if (collDreturns == null)
        {
            collDreturns = new ArrayList();
        }
    }

    /**
     * Method called to associate a Dreturn object to this object
     * through the Dreturn foreign key attribute
     *
     * @param l Dreturn
     * @throws TorqueException
     */
    public void addDreturn(Dreturn l) throws TorqueException
    {
        getDreturns().add(l);
        l.setDorder((Dorder) this);
    }

    /**
     * The criteria used to select the current contents of collDreturns
     */
    private Criteria lastDreturnsCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDreturns(new Criteria())
     *
     * @throws TorqueException
     */
    public List getDreturns() throws TorqueException
    {
        if (collDreturns == null)
        {
            collDreturns = getDreturns(new Criteria(10));
        }
        return collDreturns;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Dorder has previously
     * been saved, it will retrieve related Dreturns from storage.
     * If this Dorder is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getDreturns(Criteria criteria) throws TorqueException
    {
        if (collDreturns == null)
        {
            if (isNew())
            {
               collDreturns = new ArrayList();
            }
            else
            {
                   criteria.add(DreturnPeer.DORDER_ID, getDorderId() );
                   collDreturns = DreturnPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(DreturnPeer.DORDER_ID, getDorderId());
                   if (!lastDreturnsCriteria.equals(criteria))
                {
                    collDreturns = DreturnPeer.doSelect(criteria);
                }
            }
        }
        lastDreturnsCriteria = criteria;

        return collDreturns;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDreturns(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDreturns(Connection con) throws TorqueException
    {
        if (collDreturns == null)
        {
            collDreturns = getDreturns(new Criteria(10), con);
        }
        return collDreturns;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Dorder has previously
     * been saved, it will retrieve related Dreturns from storage.
     * If this Dorder is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDreturns(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collDreturns == null)
        {
            if (isNew())
            {
               collDreturns = new ArrayList();
            }
            else
            {
                     criteria.add(DreturnPeer.DORDER_ID, getDorderId());
                     collDreturns = DreturnPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(DreturnPeer.DORDER_ID, getDorderId());
                     if (!lastDreturnsCriteria.equals(criteria))
                 {
                     collDreturns = DreturnPeer.doSelect(criteria, con);
                 }
             }
         }
         lastDreturnsCriteria = criteria;

         return collDreturns;
     }

    

     
      
      
          
                    
                
        
        
    
      
         
          
                    
                
        
        
      



     
    
     


    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
             save(DorderPeer.getMapBuilder()
                .getDatabaseMap().getName());
     }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
         try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }

     }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
      {
        alreadyInSave = true;



  
        // If this object has been modified, then save it to the database.
        if (isModified())
        {
            if (isNew())
            {
                DorderPeer.doInsert((Dorder) this, con);
                setNew(false);
            }
            else
            {
                DorderPeer.doUpdate((Dorder) this, con);
            }
        }

                                    
                
          if (collDorderItems != null)
          {
              for (int i = 0; i < collDorderItems.size(); i++)
              {
                  ((DorderItem) collDorderItems.get(i)).save(con);
              }
          }
                                        
                
          if (collDshipments != null)
          {
              for (int i = 0; i < collDshipments.size(); i++)
              {
                  ((Dshipment) collDshipments.get(i)).save(con);
              }
          }
                                        
                
          if (collDreturns != null)
          {
              for (int i = 0; i < collDreturns.size(); i++)
              {
                  ((Dreturn) collDreturns.get(i)).save(con);
              }
          }
                  alreadyInSave = false;
      }
      }


                        
    
    

        /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param  dorder_id ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
                    setDorderId(((NumberKey) key).intValue());
            }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
                    setDorderId(Integer.parseInt(key));
            }


    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        return SimpleKey.keyFor(getDorderId());
    }

 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public Dorder copy() throws TorqueException
    {
        return copyInto(new Dorder());
    }

    protected Dorder copyInto(Dorder copyObj) throws TorqueException
    {
        copyObj.setDorderId(dorder_id);
        copyObj.setDorderCode(dorder_code);
        copyObj.setStatus(status);
        copyObj.setIssuedDate(issued_date);
        copyObj.setSalesDate(sales_date);
        copyObj.setExpectedTime(expected_time);
        copyObj.setClosedDate(closed_date);
        copyObj.setDistributorId(distributor_id);
        copyObj.setDcontractId(dcontract_id);
        copyObj.setProjectId(project_id);
        copyObj.setProductId(product_id);
        copyObj.setDescription(description);
        copyObj.setUnitPrice(unit_price);
        copyObj.setUnitWeight(unit_weight);
        copyObj.setTotalQuantity(total_quantity);
        copyObj.setTotalAmount(total_amount);
        copyObj.setTotalWeight(total_weight);
        copyObj.setNotes(notes);
        copyObj.setCreated(created);
        copyObj.setModified(modified);
        copyObj.setCreatedBy(created_by);
        copyObj.setModifiedBy(modified_by);

  copyObj.setNew(false);
                                    
                
        List v = getDorderItems();
        for (int i = 0; i < v.size(); i++)
        {
            DorderItem obj = (DorderItem) v.get(i);
            copyObj.addDorderItem(obj.copy());
            ((Persistent) v.get(i)).setNew(true);
        }
                                              
                
        v = getDshipments();
        for (int i = 0; i < v.size(); i++)
        {
            Dshipment obj = (Dshipment) v.get(i);
            copyObj.addDshipment(obj.copy());
            ((Persistent) v.get(i)).setNew(true);
        }
                                              
                
        v = getDreturns();
        for (int i = 0; i < v.size(); i++)
        {
            Dreturn obj = (Dreturn) v.get(i);
            copyObj.addDreturn(obj.copy());
            ((Persistent) v.get(i)).setNew(true);
        }
                copyObj.setNew(true);

                      copyObj.setDorderId(0);
                                                                                                        return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public DorderPeer getPeer()
    {
        return peer;
    }
}
