package org.campware.dream.om;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

import org.apache.torque.Torque;
import org.apache.torque.TorqueException;
import org.apache.torque.map.MapBuilder;
import org.apache.torque.map.TableMap;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.util.BasePeer;
import org.apache.torque.util.Criteria;

import com.workingdogs.village.DataSetException;
import com.workingdogs.village.QueryDataSet;
import com.workingdogs.village.Record;

// Local classes
import org.campware.dream.om.map.*;


   
   
   
   
/**
  * This class was autogenerated by Torque on:
  *
  * [Thu Jul 29 08:38:49 CEST 2004]
  *
  */
public abstract class BaseDistributorPeer
    extends BasePeer
{

    /** the default database name for this class */
    public static final String DATABASE_NAME = "dream";

     /** the table name for this class */
    public static final String TABLE_NAME = "DISTRIBUTOR";

    /**
     * @return the map builder for this peer
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static MapBuilder getMapBuilder()
        throws TorqueException
    {
        return getMapBuilder(DistributorMapBuilder.CLASS_NAME);
    }

    /** the column name for the DISTRIBUTOR_ID field */
    public static final String DISTRIBUTOR_ID;
    /** the column name for the DISTRIBUTOR_CODE field */
    public static final String DISTRIBUTOR_CODE;
    /** the column name for the STATUS field */
    public static final String STATUS;
    /** the column name for the DISTRIBUTOR_NAME_1 field */
    public static final String DISTRIBUTOR_NAME_1;
    /** the column name for the DISTRIBUTOR_NAME_2 field */
    public static final String DISTRIBUTOR_NAME_2;
    /** the column name for the DISTRIBUTOR_DISPLAY field */
    public static final String DISTRIBUTOR_DISPLAY;
    /** the column name for the DEAR field */
    public static final String DEAR;
    /** the column name for the DISTRIBUTOR_TYPE field */
    public static final String DISTRIBUTOR_TYPE;
    /** the column name for the GENDER field */
    public static final String GENDER;
    /** the column name for the DISTRIBUTOR_CAT_ID field */
    public static final String DISTRIBUTOR_CAT_ID;
    /** the column name for the LANGUAGE_ID field */
    public static final String LANGUAGE_ID;
    /** the column name for the ADDRESS_1 field */
    public static final String ADDRESS_1;
    /** the column name for the ADDRESS_2 field */
    public static final String ADDRESS_2;
    /** the column name for the CITY field */
    public static final String CITY;
    /** the column name for the ZIP field */
    public static final String ZIP;
    /** the column name for the STATE field */
    public static final String STATE;
    /** the column name for the COUNTRY_ID field */
    public static final String COUNTRY_ID;
    /** the column name for the REGION_ID field */
    public static final String REGION_ID;
    /** the column name for the PHONE_1 field */
    public static final String PHONE_1;
    /** the column name for the PHONE_2 field */
    public static final String PHONE_2;
    /** the column name for the FAX field */
    public static final String FAX;
    /** the column name for the EMAIL field */
    public static final String EMAIL;
    /** the column name for the EMAIL_FORMAT field */
    public static final String EMAIL_FORMAT;
    /** the column name for the SEND_NEWS field */
    public static final String SEND_NEWS;
    /** the column name for the WEB_URL field */
    public static final String WEB_URL;
    /** the column name for the CUSTOM_1 field */
    public static final String CUSTOM_1;
    /** the column name for the CUSTOM_2 field */
    public static final String CUSTOM_2;
    /** the column name for the CUSTOM_3 field */
    public static final String CUSTOM_3;
    /** the column name for the CUSTOM_4 field */
    public static final String CUSTOM_4;
    /** the column name for the CUSTOM_5 field */
    public static final String CUSTOM_5;
    /** the column name for the CUSTOM_6 field */
    public static final String CUSTOM_6;
    /** the column name for the NOTES field */
    public static final String NOTES;
    /** the column name for the CREATED field */
    public static final String CREATED;
    /** the column name for the MODIFIED field */
    public static final String MODIFIED;
    /** the column name for the CREATED_BY field */
    public static final String CREATED_BY;
    /** the column name for the MODIFIED_BY field */
    public static final String MODIFIED_BY;

    static
    {
    DISTRIBUTOR_ID = "DISTRIBUTOR.DISTRIBUTOR_ID";
    DISTRIBUTOR_CODE = "DISTRIBUTOR.DISTRIBUTOR_CODE";
    STATUS = "DISTRIBUTOR.STATUS";
    DISTRIBUTOR_NAME_1 = "DISTRIBUTOR.DISTRIBUTOR_NAME_1";
    DISTRIBUTOR_NAME_2 = "DISTRIBUTOR.DISTRIBUTOR_NAME_2";
    DISTRIBUTOR_DISPLAY = "DISTRIBUTOR.DISTRIBUTOR_DISPLAY";
    DEAR = "DISTRIBUTOR.DEAR";
    DISTRIBUTOR_TYPE = "DISTRIBUTOR.DISTRIBUTOR_TYPE";
    GENDER = "DISTRIBUTOR.GENDER";
    DISTRIBUTOR_CAT_ID = "DISTRIBUTOR.DISTRIBUTOR_CAT_ID";
    LANGUAGE_ID = "DISTRIBUTOR.LANGUAGE_ID";
    ADDRESS_1 = "DISTRIBUTOR.ADDRESS_1";
    ADDRESS_2 = "DISTRIBUTOR.ADDRESS_2";
    CITY = "DISTRIBUTOR.CITY";
    ZIP = "DISTRIBUTOR.ZIP";
    STATE = "DISTRIBUTOR.STATE";
    COUNTRY_ID = "DISTRIBUTOR.COUNTRY_ID";
    REGION_ID = "DISTRIBUTOR.REGION_ID";
    PHONE_1 = "DISTRIBUTOR.PHONE_1";
    PHONE_2 = "DISTRIBUTOR.PHONE_2";
    FAX = "DISTRIBUTOR.FAX";
    EMAIL = "DISTRIBUTOR.EMAIL";
    EMAIL_FORMAT = "DISTRIBUTOR.EMAIL_FORMAT";
    SEND_NEWS = "DISTRIBUTOR.SEND_NEWS";
    WEB_URL = "DISTRIBUTOR.WEB_URL";
    CUSTOM_1 = "DISTRIBUTOR.CUSTOM_1";
    CUSTOM_2 = "DISTRIBUTOR.CUSTOM_2";
    CUSTOM_3 = "DISTRIBUTOR.CUSTOM_3";
    CUSTOM_4 = "DISTRIBUTOR.CUSTOM_4";
    CUSTOM_5 = "DISTRIBUTOR.CUSTOM_5";
    CUSTOM_6 = "DISTRIBUTOR.CUSTOM_6";
    NOTES = "DISTRIBUTOR.NOTES";
    CREATED = "DISTRIBUTOR.CREATED";
    MODIFIED = "DISTRIBUTOR.MODIFIED";
    CREATED_BY = "DISTRIBUTOR.CREATED_BY";
    MODIFIED_BY = "DISTRIBUTOR.MODIFIED_BY";

        if (Torque.isInit())
        {
            try
            {
                getMapBuilder();
            }
            catch (Exception e)
            {
                category.error("Could not initialize Peer", e);
            }
        }
        else
        {
            Torque.registerMapBuilder(DistributorMapBuilder.CLASS_NAME);
        }
    }

 
    /** number of columns for this peer */
    public static final int numColumns =  36;

    /** A class that can be returned by this peer. */
    protected static final String CLASSNAME_DEFAULT =
        "org.campware.dream.om.Distributor";

    /** A class that can be returned by this peer. */
    protected static final Class CLASS_DEFAULT = initClass(CLASSNAME_DEFAULT);

    /**
     * Class object initialization method.
     *
     * @param className name of the class to initialize
     * @return the initialized class
     */
    private static Class initClass(String className)
    {
        Class c = null;
        try
        {
            c = Class.forName(className);
        }
        catch (Throwable t)
        {
            category.error("A FATAL ERROR has occurred which should not "
                + "have happened under any circumstance.  Please notify "
                + "the Turbine developers <turbine-dev@jakarta.apache.org> "
                + "and give as many details as possible (including the error "
                + "stack trace).", t);

            // Error objects should always be propogated.
            if (t instanceof Error)
            {
                throw (Error) t.fillInStackTrace();
            }
        }
        return c;
    }


    /**
     * Get the list of objects for a ResultSet.  Please not that your
     * resultset MUST return columns in the right order.  You can use
     * getFieldNames() in BaseObject to get the correct sequence.
     *
     * @param results the ResultSet
     * @return the list of objects
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List resultSet2Objects(java.sql.ResultSet results)
            throws TorqueException
    {
        try
        {
            QueryDataSet qds = null;
            List rows = null;
            try
            {
                qds = new QueryDataSet(results);
                rows = getSelectResults(qds);
            }
            finally
            {
                if (qds != null)
                {
                    qds.close();
                }
            }

            return populateObjects(rows);
        }
        catch (SQLException e)
        {
            throw new TorqueException(e);
        }
        catch (DataSetException e)
        {
            throw new TorqueException(e);
        }
    }



    /**
     * Method to do inserts.
     *
     * @param criteria object used to create the INSERT statement.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static ObjectKey doInsert(Criteria criteria)
        throws TorqueException
    {
        return BaseDistributorPeer
            .doInsert(criteria, (Connection) null);
    }

    /**
     * Method to do inserts.  This method is to be used during a transaction,
     * otherwise use the doInsert(Criteria) method.  It will take care of
     * the connection details internally.
     *
     * @param criteria object used to create the INSERT statement.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static ObjectKey doInsert(Criteria criteria, Connection con)
        throws TorqueException
    {

        // Set the correct dbName if it has not been overridden
        // criteria.getDbName will return the same object if not set to
        // another value so == check is okay and faster
        if (criteria.getDbName() == Torque.getDefaultDB())
        {
            criteria.setDbName(DATABASE_NAME);
        }
        if (con == null)
        {
            return BasePeer.doInsert(criteria);
        }
        else
        {
            return BasePeer.doInsert(criteria, con);
        }
    }

    /**
     * Add all the columns needed to create a new object.
     *
     * @param criteria object containing the columns to add.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void addSelectColumns(Criteria criteria)
            throws TorqueException
    {
            criteria.addSelectColumn(DISTRIBUTOR_ID);
            criteria.addSelectColumn(DISTRIBUTOR_CODE);
            criteria.addSelectColumn(STATUS);
            criteria.addSelectColumn(DISTRIBUTOR_NAME_1);
            criteria.addSelectColumn(DISTRIBUTOR_NAME_2);
            criteria.addSelectColumn(DISTRIBUTOR_DISPLAY);
            criteria.addSelectColumn(DEAR);
            criteria.addSelectColumn(DISTRIBUTOR_TYPE);
            criteria.addSelectColumn(GENDER);
            criteria.addSelectColumn(DISTRIBUTOR_CAT_ID);
            criteria.addSelectColumn(LANGUAGE_ID);
            criteria.addSelectColumn(ADDRESS_1);
            criteria.addSelectColumn(ADDRESS_2);
            criteria.addSelectColumn(CITY);
            criteria.addSelectColumn(ZIP);
            criteria.addSelectColumn(STATE);
            criteria.addSelectColumn(COUNTRY_ID);
            criteria.addSelectColumn(REGION_ID);
            criteria.addSelectColumn(PHONE_1);
            criteria.addSelectColumn(PHONE_2);
            criteria.addSelectColumn(FAX);
            criteria.addSelectColumn(EMAIL);
            criteria.addSelectColumn(EMAIL_FORMAT);
            criteria.addSelectColumn(SEND_NEWS);
            criteria.addSelectColumn(WEB_URL);
            criteria.addSelectColumn(CUSTOM_1);
            criteria.addSelectColumn(CUSTOM_2);
            criteria.addSelectColumn(CUSTOM_3);
            criteria.addSelectColumn(CUSTOM_4);
            criteria.addSelectColumn(CUSTOM_5);
            criteria.addSelectColumn(CUSTOM_6);
            criteria.addSelectColumn(NOTES);
            criteria.addSelectColumn(CREATED);
            criteria.addSelectColumn(MODIFIED);
            criteria.addSelectColumn(CREATED_BY);
            criteria.addSelectColumn(MODIFIED_BY);
        }


    /**
     * Create a new object of type cls from a resultset row starting
     * from a specified offset.  This is done so that you can select
     * other rows than just those needed for this object.  You may
     * for example want to create two objects from the same row.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static Distributor row2Object(Record row,
                                             int offset,
                                             Class cls)
        throws TorqueException
    {
        try
        {
            Distributor obj = (Distributor) cls.newInstance();
            populateObject(row, offset, obj);
                            obj.setModified(false);
                        obj.setNew(false);

            return obj;
        }
        catch (InstantiationException e)
        {
            throw new TorqueException(e);
        }
        catch (IllegalAccessException e)
        {
            throw new TorqueException(e);
        }
    }

    /**
     * Populates an object from a resultset row starting
     * from a specified offset.  This is done so that you can select
     * other rows than just those needed for this object.  You may
     * for example want to create two objects from the same row.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void populateObject(Record row,
                                      int offset,
                                      Distributor obj)
        throws TorqueException
    {
        try
        {
                                        obj.setDistributorId(row.getValue(offset + 0).asInt());
                                            obj.setDistributorCode(row.getValue(offset + 1).asString());
                                            obj.setStatus(row.getValue(offset + 2).asInt());
                                            obj.setDistributorName1(row.getValue(offset + 3).asString());
                                            obj.setDistributorName2(row.getValue(offset + 4).asString());
                                            obj.setDistributorDisplay(row.getValue(offset + 5).asString());
                                            obj.setDear(row.getValue(offset + 6).asString());
                                            obj.setDistributorType(row.getValue(offset + 7).asInt());
                                            obj.setGender(row.getValue(offset + 8).asInt());
                                            obj.setDistributorCatId(row.getValue(offset + 9).asInt());
                                            obj.setLanguageId(row.getValue(offset + 10).asInt());
                                            obj.setAddress1(row.getValue(offset + 11).asString());
                                            obj.setAddress2(row.getValue(offset + 12).asString());
                                            obj.setCity(row.getValue(offset + 13).asString());
                                            obj.setZip(row.getValue(offset + 14).asString());
                                            obj.setState(row.getValue(offset + 15).asString());
                                            obj.setCountryId(row.getValue(offset + 16).asInt());
                                            obj.setRegionId(row.getValue(offset + 17).asInt());
                                            obj.setPhone1(row.getValue(offset + 18).asString());
                                            obj.setPhone2(row.getValue(offset + 19).asString());
                                            obj.setFax(row.getValue(offset + 20).asString());
                                            obj.setEmail(row.getValue(offset + 21).asString());
                                            obj.setEmailFormat(row.getValue(offset + 22).asInt());
                                            obj.setSendNews(row.getValue(offset + 23).asInt());
                                            obj.setWebUrl(row.getValue(offset + 24).asString());
                                            obj.setCustom1(row.getValue(offset + 25).asString());
                                            obj.setCustom2(row.getValue(offset + 26).asString());
                                            obj.setCustom3(row.getValue(offset + 27).asString());
                                            obj.setCustom4(row.getValue(offset + 28).asString());
                                            obj.setCustom5(row.getValue(offset + 29).asString());
                                            obj.setCustom6(row.getValue(offset + 30).asString());
                                            obj.setNotes(row.getValue(offset + 31).asString());
                                            obj.setCreated(row.getValue(offset + 32).asUtilDate());
                                            obj.setModified(row.getValue(offset + 33).asUtilDate());
                                            obj.setCreatedBy(row.getValue(offset + 34).asString());
                                            obj.setModifiedBy(row.getValue(offset + 35).asString());
                            }
        catch (DataSetException e)
        {
            throw new TorqueException(e);
        }
    }

    /**
     * Method to do selects.
     *
     * @param criteria object used to create the SELECT statement.
     * @return List of selected Objects
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelect(Criteria criteria) throws TorqueException
    {
        return populateObjects(doSelectVillageRecords(criteria));
    }

    /**
     * Method to do selects within a transaction.
     *
     * @param criteria object used to create the SELECT statement.
     * @param con the connection to use
     * @return List of selected Objects
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelect(Criteria criteria, Connection con)
        throws TorqueException
    {
        return populateObjects(doSelectVillageRecords(criteria, con));
    }

    /**
     * Grabs the raw Village records to be formed into objects.
     * This method handles connections internally.  The Record objects
     * returned by this method should be considered readonly.  Do not
     * alter the data and call save(), your results may vary, but are
     * certainly likely to result in hard to track MT bugs.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelectVillageRecords(Criteria criteria)
        throws TorqueException
    {
        return BaseDistributorPeer
            .doSelectVillageRecords(criteria, (Connection) null);
    }

    /**
     * Grabs the raw Village records to be formed into objects.
     * This method should be used for transactions
     *
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelectVillageRecords(Criteria criteria, Connection con)
        throws TorqueException
    {
    
        if (criteria.getSelectColumns().size() == 0)
        {
            addSelectColumns(criteria);
        }


        // Set the correct dbName if it has not been overridden
        // criteria.getDbName will return the same object if not set to
        // another value so == check is okay and faster
        if (criteria.getDbName() == Torque.getDefaultDB())
        {
            criteria.setDbName(DATABASE_NAME);
        }
        // BasePeer returns a List of Value (Village) arrays.  The array
        // order follows the order columns were placed in the Select clause.
        if (con == null)
        {
            return BasePeer.doSelect(criteria);
        }
        else
        {
            return BasePeer.doSelect(criteria, con);
        }
    }

    /**
     * The returned List will contain objects of the default type or
     * objects that inherit from the default.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List populateObjects(List records)
        throws TorqueException
    {
        List results = new ArrayList(records.size());

        // populate the object(s)
        for (int i = 0; i < records.size(); i++)
        {
            Record row = (Record) records.get(i);
            results.add(DistributorPeer.row2Object(row, 1,
                DistributorPeer.getOMClass()));
        }
        return results;
    }
 

    /**
     * The class that the Peer will make instances of.
     * If the BO is abstract then you must implement this method
     * in the BO.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static Class getOMClass()
        throws TorqueException
    {
            return CLASS_DEFAULT;
        }


    /**
     * Method to do updates.
     *
     * @param criteria object containing data that is used to create the UPDATE
     *        statement.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doUpdate(Criteria criteria) throws TorqueException
    {
         BaseDistributorPeer
            .doUpdate(criteria, (Connection) null);
    }

    /**
     * Method to do updates.  This method is to be used during a transaction,
     * otherwise use the doUpdate(Criteria) method.  It will take care of
     * the connection details internally.
     *
     * @param criteria object containing data that is used to create the UPDATE
     *        statement.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doUpdate(Criteria criteria, Connection con)
        throws TorqueException
    {
        Criteria selectCriteria = new Criteria(DATABASE_NAME, 2);
                                selectCriteria.put(DISTRIBUTOR_ID, criteria.remove(DISTRIBUTOR_ID));

        // Set the correct dbName if it has not been overridden
        // criteria.getDbName will return the same object if not set to
        // another value so == check is okay and faster
        if (criteria.getDbName() == Torque.getDefaultDB())
        {
            criteria.setDbName(DATABASE_NAME);
        }
        if (con == null)
        {
            BasePeer.doUpdate(selectCriteria, criteria);
        }
        else
        {
            BasePeer.doUpdate(selectCriteria, criteria, con);
        }
    }

    /**
     * Method to do deletes.
     *
     * @param criteria object containing data that is used DELETE from database.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
     public static void doDelete(Criteria criteria) throws TorqueException
     {
         BaseDistributorPeer
            .doDelete(criteria, (Connection) null);
     }

    /**
     * Method to do deletes.  This method is to be used during a transaction,
     * otherwise use the doDelete(Criteria) method.  It will take care of
     * the connection details internally.
     *
     * @param criteria object containing data that is used DELETE from database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
     public static void doDelete(Criteria criteria, Connection con)
        throws TorqueException
     {

        // Set the correct dbName if it has not been overridden
        // criteria.getDbName will return the same object if not set to
        // another value so == check is okay and faster
        if (criteria.getDbName() == Torque.getDefaultDB())
        {
            criteria.setDbName(DATABASE_NAME);
        }
        if (con == null)
        {
            BasePeer.doDelete(criteria);
        }
        else
        {
            BasePeer.doDelete(criteria, con);
        }
     }

    /**
     * Method to do selects
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List doSelect(Distributor obj) throws TorqueException
    {
        return doSelect(buildCriteria(obj));
    }

    /**
     * Method to do inserts
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doInsert(Distributor obj) throws TorqueException
    {
                obj.setPrimaryKey(doInsert(buildCriteria(obj)));
                obj.setNew(false);
        obj.setModified(false);
    }

    /**
     * @param obj the data object to update in the database.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doUpdate(Distributor obj) throws TorqueException
    {
        doUpdate(buildCriteria(obj));
        obj.setModified(false);
    }

    /**
     * @param obj the data object to delete in the database.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doDelete(Distributor obj) throws TorqueException
    {
        doDelete(buildCriteria(obj));
    }

    /**
     * Method to do inserts.  This method is to be used during a transaction,
     * otherwise use the doInsert(Distributor) method.  It will take
     * care of the connection details internally.
     *
     * @param obj the data object to insert into the database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doInsert(Distributor obj, Connection con)
        throws TorqueException
    {
                obj.setPrimaryKey(doInsert(buildCriteria(obj), con));
                obj.setNew(false);
        obj.setModified(false);
    }

    /**
     * Method to do update.  This method is to be used during a transaction,
     * otherwise use the doUpdate(Distributor) method.  It will take
     * care of the connection details internally.
     *
     * @param obj the data object to update in the database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doUpdate(Distributor obj, Connection con)
        throws TorqueException
    {
        doUpdate(buildCriteria(obj), con);
        obj.setModified(false);
    }

    /**
     * Method to delete.  This method is to be used during a transaction,
     * otherwise use the doDelete(Distributor) method.  It will take
     * care of the connection details internally.
     *
     * @param obj the data object to delete in the database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doDelete(Distributor obj, Connection con)
        throws TorqueException
    {
        doDelete(buildCriteria(obj), con);
    }

    /**
     * Method to do deletes.
     *
     * @param pk ObjectKey that is used DELETE from database.
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doDelete(ObjectKey pk) throws TorqueException
    {
        BaseDistributorPeer
           .doDelete(pk, (Connection) null);
    }

    /**
     * Method to delete.  This method is to be used during a transaction,
     * otherwise use the doDelete(ObjectKey) method.  It will take
     * care of the connection details internally.
     *
     * @param pk the primary key for the object to delete in the database.
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static void doDelete(ObjectKey pk, Connection con)
        throws TorqueException
    {
        doDelete(buildCriteria(pk), con);
    }

    /** Build a Criteria object from an ObjectKey */
    public static Criteria buildCriteria( ObjectKey pk )
    {
        Criteria criteria = new Criteria();
              criteria.add(DISTRIBUTOR_ID, pk);
          return criteria;
     }

    /** Build a Criteria object from the data object for this peer */
    public static Criteria buildCriteria( Distributor obj )
    {
        Criteria criteria = new Criteria(DATABASE_NAME);
                            if (!obj.isNew())
                       criteria.add(DISTRIBUTOR_ID, obj.getDistributorId());
                                criteria.add(DISTRIBUTOR_CODE, obj.getDistributorCode());
                                criteria.add(STATUS, obj.getStatus());
                                criteria.add(DISTRIBUTOR_NAME_1, obj.getDistributorName1());
                                criteria.add(DISTRIBUTOR_NAME_2, obj.getDistributorName2());
                                criteria.add(DISTRIBUTOR_DISPLAY, obj.getDistributorDisplay());
                                criteria.add(DEAR, obj.getDear());
                                criteria.add(DISTRIBUTOR_TYPE, obj.getDistributorType());
                                criteria.add(GENDER, obj.getGender());
                                criteria.add(DISTRIBUTOR_CAT_ID, obj.getDistributorCatId());
                                criteria.add(LANGUAGE_ID, obj.getLanguageId());
                                criteria.add(ADDRESS_1, obj.getAddress1());
                                criteria.add(ADDRESS_2, obj.getAddress2());
                                criteria.add(CITY, obj.getCity());
                                criteria.add(ZIP, obj.getZip());
                                criteria.add(STATE, obj.getState());
                                criteria.add(COUNTRY_ID, obj.getCountryId());
                                criteria.add(REGION_ID, obj.getRegionId());
                                criteria.add(PHONE_1, obj.getPhone1());
                                criteria.add(PHONE_2, obj.getPhone2());
                                criteria.add(FAX, obj.getFax());
                                criteria.add(EMAIL, obj.getEmail());
                                criteria.add(EMAIL_FORMAT, obj.getEmailFormat());
                                criteria.add(SEND_NEWS, obj.getSendNews());
                                criteria.add(WEB_URL, obj.getWebUrl());
                                criteria.add(CUSTOM_1, obj.getCustom1());
                                criteria.add(CUSTOM_2, obj.getCustom2());
                                criteria.add(CUSTOM_3, obj.getCustom3());
                                criteria.add(CUSTOM_4, obj.getCustom4());
                                criteria.add(CUSTOM_5, obj.getCustom5());
                                criteria.add(CUSTOM_6, obj.getCustom6());
                                criteria.add(NOTES, obj.getNotes());
                                criteria.add(CREATED, obj.getCreated());
                                criteria.add(MODIFIED, obj.getModified());
                                criteria.add(CREATED_BY, obj.getCreatedBy());
                                criteria.add(MODIFIED_BY, obj.getModifiedBy());
                return criteria;
    }

 

    
    /**
     * Retrieve a single object by pk
     *
     * @param pk the primary key
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static Distributor retrieveByPK(int pk)
        throws TorqueException
    {
        return retrieveByPK(SimpleKey.keyFor(pk));
    }

    /**
     * Retrieve a single object by pk
     *
     * @param pk the primary key
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static Distributor retrieveByPK(ObjectKey pk)
        throws TorqueException
    {
        Connection db = null;
        Distributor retVal = null;
        try
        {
            db = Torque.getConnection(DATABASE_NAME);
            retVal = retrieveByPK(pk, db);
        }
        finally
        {
            Torque.closeConnection(db);
        }
        return(retVal);
    }

    /**
     * Retrieve a single object by pk
     *
     * @param pk the primary key
     * @param con the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static Distributor retrieveByPK(ObjectKey pk, Connection con)
        throws TorqueException
    {
        Criteria criteria = buildCriteria(pk);
        List v = doSelect(criteria, con);
        if (v.size() != 1)
        {
            throw new TorqueException("Failed to select one and only one row.");
        }
        else
        {
            return (Distributor)v.get(0);
        }
    }

    /**
     * Retrieve a multiple objects by pk
     *
     * @param pks List of primary keys
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List retrieveByPKs(List pks)
        throws TorqueException
    {
        Connection db = null;
        List retVal = null;
        try
        {
           db = Torque.getConnection(DATABASE_NAME);
           retVal = retrieveByPKs(pks, db);
        }
        finally
        {
            Torque.closeConnection(db);
        }
        return(retVal);
    }

    /**
     * Retrieve a multiple objects by pk
     *
     * @param pks List of primary keys
     * @param dbcon the connection to use
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    public static List retrieveByPKs( List pks, Connection dbcon )
        throws TorqueException
    {
        List objs = null;
        if (pks == null || pks.size() == 0)
        {
            objs = new LinkedList();
        }
        else
        {
            Criteria criteria = new Criteria();
              criteria.addIn( DISTRIBUTOR_ID, pks );
          objs = doSelect(criteria, dbcon);
        }
        return objs;
    }

 



        
          
                       
          
          


    /**
     * selects a collection of Distributor objects pre-filled with their
     * DistributorCategory objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in DistributorPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinDistributorCategory(Criteria c)
        throws TorqueException
    {
    
        // Set the correct dbName if it has not been overridden
        // c.getDbName will return the same object if not set to
        // another value so == check is okay and faster
        if (c.getDbName() == Torque.getDefaultDB())
        {
            c.setDbName(DATABASE_NAME);
        }

        DistributorPeer.addSelectColumns(c);
        int offset = numColumns + 1;
        DistributorCategoryPeer.addSelectColumns(c);


                  c.addJoin(DistributorPeer.DISTRIBUTOR_CAT_ID,
            DistributorCategoryPeer.DISTRIBUTOR_CAT_ID);
     


        List rows = BasePeer.doSelect(c);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

            Class omClass = DistributorPeer.getOMClass();

            Distributor obj1 = (Distributor) DistributorPeer
                .row2Object(row, 1, omClass);


             omClass = DistributorCategoryPeer.getOMClass();
            DistributorCategory obj2 = (DistributorCategory)DistributorCategoryPeer
                .row2Object(row, offset, omClass);

            boolean newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Distributor temp_obj1 = (Distributor)results.get(j);
                DistributorCategory temp_obj2 = (DistributorCategory)temp_obj1.getDistributorCategory();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addDistributor(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initDistributors();
                obj2.addDistributor(obj1);
            }
            results.add(obj1);
        }
        return results;
    }
            
                       
          
          


    /**
     * selects a collection of Distributor objects pre-filled with their
     * Country objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in DistributorPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinCountry(Criteria c)
        throws TorqueException
    {
    
        // Set the correct dbName if it has not been overridden
        // c.getDbName will return the same object if not set to
        // another value so == check is okay and faster
        if (c.getDbName() == Torque.getDefaultDB())
        {
            c.setDbName(DATABASE_NAME);
        }

        DistributorPeer.addSelectColumns(c);
        int offset = numColumns + 1;
        CountryPeer.addSelectColumns(c);


                  c.addJoin(DistributorPeer.COUNTRY_ID,
            CountryPeer.COUNTRY_ID);
     


        List rows = BasePeer.doSelect(c);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

            Class omClass = DistributorPeer.getOMClass();

            Distributor obj1 = (Distributor) DistributorPeer
                .row2Object(row, 1, omClass);


             omClass = CountryPeer.getOMClass();
            Country obj2 = (Country)CountryPeer
                .row2Object(row, offset, omClass);

            boolean newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Distributor temp_obj1 = (Distributor)results.get(j);
                Country temp_obj2 = (Country)temp_obj1.getCountry();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addDistributor(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initDistributors();
                obj2.addDistributor(obj1);
            }
            results.add(obj1);
        }
        return results;
    }
            
                       
          
          


    /**
     * selects a collection of Distributor objects pre-filled with their
     * Region objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in DistributorPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinRegion(Criteria c)
        throws TorqueException
    {
    
        // Set the correct dbName if it has not been overridden
        // c.getDbName will return the same object if not set to
        // another value so == check is okay and faster
        if (c.getDbName() == Torque.getDefaultDB())
        {
            c.setDbName(DATABASE_NAME);
        }

        DistributorPeer.addSelectColumns(c);
        int offset = numColumns + 1;
        RegionPeer.addSelectColumns(c);


                  c.addJoin(DistributorPeer.REGION_ID,
            RegionPeer.REGION_ID);
     


        List rows = BasePeer.doSelect(c);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

            Class omClass = DistributorPeer.getOMClass();

            Distributor obj1 = (Distributor) DistributorPeer
                .row2Object(row, 1, omClass);


             omClass = RegionPeer.getOMClass();
            Region obj2 = (Region)RegionPeer
                .row2Object(row, offset, omClass);

            boolean newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Distributor temp_obj1 = (Distributor)results.get(j);
                Region temp_obj2 = (Region)temp_obj1.getRegion();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addDistributor(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initDistributors();
                obj2.addDistributor(obj1);
            }
            results.add(obj1);
        }
        return results;
    }
            
                       
          
          


    /**
     * selects a collection of Distributor objects pre-filled with their
     * Language objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in DistributorPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinLanguage(Criteria c)
        throws TorqueException
    {
    
        // Set the correct dbName if it has not been overridden
        // c.getDbName will return the same object if not set to
        // another value so == check is okay and faster
        if (c.getDbName() == Torque.getDefaultDB())
        {
            c.setDbName(DATABASE_NAME);
        }

        DistributorPeer.addSelectColumns(c);
        int offset = numColumns + 1;
        LanguagePeer.addSelectColumns(c);


                  c.addJoin(DistributorPeer.LANGUAGE_ID,
            LanguagePeer.LANGUAGE_ID);
     


        List rows = BasePeer.doSelect(c);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record) rows.get(i);

            Class omClass = DistributorPeer.getOMClass();

            Distributor obj1 = (Distributor) DistributorPeer
                .row2Object(row, 1, omClass);


             omClass = LanguagePeer.getOMClass();
            Language obj2 = (Language)LanguagePeer
                .row2Object(row, offset, omClass);

            boolean newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Distributor temp_obj1 = (Distributor)results.get(j);
                Language temp_obj2 = (Language)temp_obj1.getLanguage();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addDistributor(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initDistributors();
                obj2.addDistributor(obj1);
            }
            results.add(obj1);
        }
        return results;
    }
     

  
                        
    
     
                       
          

    /**
     * selects a collection of Distributor objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in DistributorPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptDistributorCategory(Criteria c)
        throws TorqueException
    {
    
        // Set the correct dbName if it has not been overridden
        // c.getDbName will return the same object if not set to another value
        // so == check is okay and faster
        if (c.getDbName() == Torque.getDefaultDB())
        {
            c.setDbName(DATABASE_NAME);
        }

        addSelectColumns(c);
        int offset2 = numColumns + 1;
                    
                              
                CountryPeer.addSelectColumns(c);
        int offset3 = offset2 + CountryPeer.numColumns;
                                          
                RegionPeer.addSelectColumns(c);
        int offset4 = offset3 + RegionPeer.numColumns;
                                          
                LanguagePeer.addSelectColumns(c);
        int offset5 = offset4 + LanguagePeer.numColumns;

        List rows = BasePeer.doSelect(c);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record)rows.get(i);

                        Class omClass = DistributorPeer.getOMClass();
      
            Distributor obj1 = (Distributor)DistributorPeer
                .row2Object(row, 1, omClass);


                            
                                  
                                                
                        
            
                 omClass = CountryPeer.getOMClass();
                Country obj2 = (Country)CountryPeer
                .row2Object( row, offset2, omClass);

             boolean  newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Distributor temp_obj1 = (Distributor)results.get(j);
                Country temp_obj2 = (Country)temp_obj1.getCountry();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addDistributor(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initDistributors();
                obj2.addDistributor(obj1);
            }
                                
                                                
                        
            
                 omClass = RegionPeer.getOMClass();
                Region obj3 = (Region)RegionPeer
                .row2Object( row, offset3, omClass);

             newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Distributor temp_obj1 = (Distributor)results.get(j);
                Region temp_obj3 = (Region)temp_obj1.getRegion();
                if (temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj3.addDistributor(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj3.initDistributors();
                obj3.addDistributor(obj1);
            }
                                
                                                
                        
            
                 omClass = LanguagePeer.getOMClass();
                Language obj4 = (Language)LanguagePeer
                .row2Object( row, offset4, omClass);

             newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Distributor temp_obj1 = (Distributor)results.get(j);
                Language temp_obj4 = (Language)temp_obj1.getLanguage();
                if (temp_obj4.getPrimaryKey().equals(obj4.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj4.addDistributor(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj4.initDistributors();
                obj4.addDistributor(obj1);
            }
                        results.add(obj1);
        }
        return results;
    }
  
     
                       
          

    /**
     * selects a collection of Distributor objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in DistributorPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptCountry(Criteria c)
        throws TorqueException
    {
    
        // Set the correct dbName if it has not been overridden
        // c.getDbName will return the same object if not set to another value
        // so == check is okay and faster
        if (c.getDbName() == Torque.getDefaultDB())
        {
            c.setDbName(DATABASE_NAME);
        }

        addSelectColumns(c);
        int offset2 = numColumns + 1;
                    
                DistributorCategoryPeer.addSelectColumns(c);
        int offset3 = offset2 + DistributorCategoryPeer.numColumns;
                                          
                              
                RegionPeer.addSelectColumns(c);
        int offset4 = offset3 + RegionPeer.numColumns;
                                          
                LanguagePeer.addSelectColumns(c);
        int offset5 = offset4 + LanguagePeer.numColumns;

        List rows = BasePeer.doSelect(c);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record)rows.get(i);

                        Class omClass = DistributorPeer.getOMClass();
      
            Distributor obj1 = (Distributor)DistributorPeer
                .row2Object(row, 1, omClass);


                            
                                                
                        
            
                 omClass = DistributorCategoryPeer.getOMClass();
                DistributorCategory obj2 = (DistributorCategory)DistributorCategoryPeer
                .row2Object( row, offset2, omClass);

             boolean  newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Distributor temp_obj1 = (Distributor)results.get(j);
                DistributorCategory temp_obj2 = (DistributorCategory)temp_obj1.getDistributorCategory();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addDistributor(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initDistributors();
                obj2.addDistributor(obj1);
            }
                                
                                  
                                                
                        
            
                 omClass = RegionPeer.getOMClass();
                Region obj3 = (Region)RegionPeer
                .row2Object( row, offset3, omClass);

             newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Distributor temp_obj1 = (Distributor)results.get(j);
                Region temp_obj3 = (Region)temp_obj1.getRegion();
                if (temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj3.addDistributor(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj3.initDistributors();
                obj3.addDistributor(obj1);
            }
                                
                                                
                        
            
                 omClass = LanguagePeer.getOMClass();
                Language obj4 = (Language)LanguagePeer
                .row2Object( row, offset4, omClass);

             newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Distributor temp_obj1 = (Distributor)results.get(j);
                Language temp_obj4 = (Language)temp_obj1.getLanguage();
                if (temp_obj4.getPrimaryKey().equals(obj4.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj4.addDistributor(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj4.initDistributors();
                obj4.addDistributor(obj1);
            }
                        results.add(obj1);
        }
        return results;
    }
  
     
                       
          

    /**
     * selects a collection of Distributor objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in DistributorPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptRegion(Criteria c)
        throws TorqueException
    {
    
        // Set the correct dbName if it has not been overridden
        // c.getDbName will return the same object if not set to another value
        // so == check is okay and faster
        if (c.getDbName() == Torque.getDefaultDB())
        {
            c.setDbName(DATABASE_NAME);
        }

        addSelectColumns(c);
        int offset2 = numColumns + 1;
                    
                DistributorCategoryPeer.addSelectColumns(c);
        int offset3 = offset2 + DistributorCategoryPeer.numColumns;
                                          
                CountryPeer.addSelectColumns(c);
        int offset4 = offset3 + CountryPeer.numColumns;
                                          
                              
                LanguagePeer.addSelectColumns(c);
        int offset5 = offset4 + LanguagePeer.numColumns;

        List rows = BasePeer.doSelect(c);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record)rows.get(i);

                        Class omClass = DistributorPeer.getOMClass();
      
            Distributor obj1 = (Distributor)DistributorPeer
                .row2Object(row, 1, omClass);


                            
                                                
                        
            
                 omClass = DistributorCategoryPeer.getOMClass();
                DistributorCategory obj2 = (DistributorCategory)DistributorCategoryPeer
                .row2Object( row, offset2, omClass);

             boolean  newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Distributor temp_obj1 = (Distributor)results.get(j);
                DistributorCategory temp_obj2 = (DistributorCategory)temp_obj1.getDistributorCategory();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addDistributor(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initDistributors();
                obj2.addDistributor(obj1);
            }
                                
                                                
                        
            
                 omClass = CountryPeer.getOMClass();
                Country obj3 = (Country)CountryPeer
                .row2Object( row, offset3, omClass);

             newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Distributor temp_obj1 = (Distributor)results.get(j);
                Country temp_obj3 = (Country)temp_obj1.getCountry();
                if (temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj3.addDistributor(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj3.initDistributors();
                obj3.addDistributor(obj1);
            }
                                
                                  
                                                
                        
            
                 omClass = LanguagePeer.getOMClass();
                Language obj4 = (Language)LanguagePeer
                .row2Object( row, offset4, omClass);

             newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Distributor temp_obj1 = (Distributor)results.get(j);
                Language temp_obj4 = (Language)temp_obj1.getLanguage();
                if (temp_obj4.getPrimaryKey().equals(obj4.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj4.addDistributor(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj4.initDistributors();
                obj4.addDistributor(obj1);
            }
                        results.add(obj1);
        }
        return results;
    }
  
     
                       
          

    /**
     * selects a collection of Distributor objects pre-filled with
     * all related objects.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in DistributorPeer.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static List doSelectJoinAllExceptLanguage(Criteria c)
        throws TorqueException
    {
    
        // Set the correct dbName if it has not been overridden
        // c.getDbName will return the same object if not set to another value
        // so == check is okay and faster
        if (c.getDbName() == Torque.getDefaultDB())
        {
            c.setDbName(DATABASE_NAME);
        }

        addSelectColumns(c);
        int offset2 = numColumns + 1;
                    
                DistributorCategoryPeer.addSelectColumns(c);
        int offset3 = offset2 + DistributorCategoryPeer.numColumns;
                                          
                CountryPeer.addSelectColumns(c);
        int offset4 = offset3 + CountryPeer.numColumns;
                                          
                RegionPeer.addSelectColumns(c);
        int offset5 = offset4 + RegionPeer.numColumns;
                                          

        List rows = BasePeer.doSelect(c);
        List results = new ArrayList();

        for (int i = 0; i < rows.size(); i++)
        {
            Record row = (Record)rows.get(i);

                        Class omClass = DistributorPeer.getOMClass();
      
            Distributor obj1 = (Distributor)DistributorPeer
                .row2Object(row, 1, omClass);


                            
                                                
                        
            
                 omClass = DistributorCategoryPeer.getOMClass();
                DistributorCategory obj2 = (DistributorCategory)DistributorCategoryPeer
                .row2Object( row, offset2, omClass);

             boolean  newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Distributor temp_obj1 = (Distributor)results.get(j);
                DistributorCategory temp_obj2 = (DistributorCategory)temp_obj1.getDistributorCategory();
                if (temp_obj2.getPrimaryKey().equals(obj2.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj2.addDistributor(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj2.initDistributors();
                obj2.addDistributor(obj1);
            }
                                
                                                
                        
            
                 omClass = CountryPeer.getOMClass();
                Country obj3 = (Country)CountryPeer
                .row2Object( row, offset3, omClass);

             newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Distributor temp_obj1 = (Distributor)results.get(j);
                Country temp_obj3 = (Country)temp_obj1.getCountry();
                if (temp_obj3.getPrimaryKey().equals(obj3.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj3.addDistributor(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj3.initDistributors();
                obj3.addDistributor(obj1);
            }
                                
                                                
                        
            
                 omClass = RegionPeer.getOMClass();
                Region obj4 = (Region)RegionPeer
                .row2Object( row, offset4, omClass);

             newObject = true;
            for (int j = 0; j < results.size(); j++)
            {
                Distributor temp_obj1 = (Distributor)results.get(j);
                Region temp_obj4 = (Region)temp_obj1.getRegion();
                if (temp_obj4.getPrimaryKey().equals(obj4.getPrimaryKey()))
                {
                    newObject = false;
                    temp_obj4.addDistributor(obj1);
                    break;
                }
            }
            if (newObject)
            {
                obj4.initDistributors();
                obj4.addDistributor(obj1);
            }
                                
                          results.add(obj1);
        }
        return results;
    }
    

    /**
     * Returns the TableMap related to this peer.  This method is not
     * needed for general use but a specific application could have a need.
     *
     * @throws TorqueException Any exceptions caught during processing will be
     *         rethrown wrapped into a TorqueException.
     */
    protected static TableMap getTableMap()
        throws TorqueException
    {
        return Torque.getDatabaseMap(DATABASE_NAME).getTable(TABLE_NAME);
    }
 }
