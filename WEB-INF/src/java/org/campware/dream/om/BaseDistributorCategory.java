package org.campware.dream.om;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Date;
import java.util.Collections;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;


/**
 * This class was autogenerated by Torque on:
 *
 * [Thu Jul 29 08:38:49 CEST 2004]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to DistributorCategory
 */
public abstract class BaseDistributorCategory extends BaseObject
{
    /** The Peer class */
    private static final DistributorCategoryPeer peer =
        new DistributorCategoryPeer();

                  
        /**
         * The value for the distributor_cat_id field
         */
        private int distributor_cat_id;
              
        /**
         * The value for the distributor_cat_name field
         */
        private String distributor_cat_name;
      
      
        /**
         * Get the DistributorCatId
         *
         * @return int
         */
        public int getDistributorCatId()
        {
            return distributor_cat_id;
        }

                                                                              
        /**
         * Set the value of DistributorCatId
         *
         * @param v new value
         */
        public void setDistributorCatId(int v) throws TorqueException
        {
          


         if (this.distributor_cat_id != v)
        {
             this.distributor_cat_id = v;
            setModified(true);
        }

                  
                                                  
              // update associated Distributor
              if (collDistributors != null)
              {
                  for (int i = 0; i < collDistributors.size(); i++)
                  {
                      ((Distributor) collDistributors.get(i))
                          .setDistributorCatId(v);
                  }
              }
                                                              
              // update associated Dnewsletter
              if (collDnewsletters != null)
              {
                  for (int i = 0; i < collDnewsletters.size(); i++)
                  {
                      ((Dnewsletter) collDnewsletters.get(i))
                          .setDistributorCatId(v);
                  }
              }
                                   }


        /**
         * Get the DistributorCatName
         *
         * @return String
         */
        public String getDistributorCatName()
        {
            return distributor_cat_name;
        }

                                            
        /**
         * Set the value of DistributorCatName
         *
         * @param v new value
         */
        public void setDistributorCatName(String v) 
        {
          


         if (!ObjectUtils.equals(this.distributor_cat_name, v))
        {
             this.distributor_cat_name = v;
            setModified(true);
        }

                  
                       }


 
        
                
      
    /**
     * Collection to store aggregation of collDistributors
     */
    protected List collDistributors;

    /**
     * Temporary storage of collDistributors to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initDistributors()
    {
        if (collDistributors == null)
        {
            collDistributors = new ArrayList();
        }
    }

    /**
     * Method called to associate a Distributor object to this object
     * through the Distributor foreign key attribute
     *
     * @param l Distributor
     * @throws TorqueException
     */
    public void addDistributor(Distributor l) throws TorqueException
    {
        getDistributors().add(l);
        l.setDistributorCategory((DistributorCategory) this);
    }

    /**
     * The criteria used to select the current contents of collDistributors
     */
    private Criteria lastDistributorsCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDistributors(new Criteria())
     *
     * @throws TorqueException
     */
    public List getDistributors() throws TorqueException
    {
        if (collDistributors == null)
        {
            collDistributors = getDistributors(new Criteria(10));
        }
        return collDistributors;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DistributorCategory has previously
     * been saved, it will retrieve related Distributors from storage.
     * If this DistributorCategory is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getDistributors(Criteria criteria) throws TorqueException
    {
        if (collDistributors == null)
        {
            if (isNew())
            {
               collDistributors = new ArrayList();
            }
            else
            {
                   criteria.add(DistributorPeer.DISTRIBUTOR_CAT_ID, getDistributorCatId() );
                   collDistributors = DistributorPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(DistributorPeer.DISTRIBUTOR_CAT_ID, getDistributorCatId());
                   if (!lastDistributorsCriteria.equals(criteria))
                {
                    collDistributors = DistributorPeer.doSelect(criteria);
                }
            }
        }
        lastDistributorsCriteria = criteria;

        return collDistributors;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDistributors(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDistributors(Connection con) throws TorqueException
    {
        if (collDistributors == null)
        {
            collDistributors = getDistributors(new Criteria(10), con);
        }
        return collDistributors;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DistributorCategory has previously
     * been saved, it will retrieve related Distributors from storage.
     * If this DistributorCategory is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDistributors(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collDistributors == null)
        {
            if (isNew())
            {
               collDistributors = new ArrayList();
            }
            else
            {
                     criteria.add(DistributorPeer.DISTRIBUTOR_CAT_ID, getDistributorCatId());
                     collDistributors = DistributorPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(DistributorPeer.DISTRIBUTOR_CAT_ID, getDistributorCatId());
                     if (!lastDistributorsCriteria.equals(criteria))
                 {
                     collDistributors = DistributorPeer.doSelect(criteria, con);
                 }
             }
         }
         lastDistributorsCriteria = criteria;

         return collDistributors;
     }

      

     
      
         
          
                    
                
        
        
    
      
      
          
                    
                
        
        
    
      
      
          
                    
                
        
        
    
      
      
          
                    
                
        
        
      



             
      
    /**
     * Collection to store aggregation of collDnewsletters
     */
    protected List collDnewsletters;

    /**
     * Temporary storage of collDnewsletters to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initDnewsletters()
    {
        if (collDnewsletters == null)
        {
            collDnewsletters = new ArrayList();
        }
    }

    /**
     * Method called to associate a Dnewsletter object to this object
     * through the Dnewsletter foreign key attribute
     *
     * @param l Dnewsletter
     * @throws TorqueException
     */
    public void addDnewsletter(Dnewsletter l) throws TorqueException
    {
        getDnewsletters().add(l);
        l.setDistributorCategory((DistributorCategory) this);
    }

    /**
     * The criteria used to select the current contents of collDnewsletters
     */
    private Criteria lastDnewslettersCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDnewsletters(new Criteria())
     *
     * @throws TorqueException
     */
    public List getDnewsletters() throws TorqueException
    {
        if (collDnewsletters == null)
        {
            collDnewsletters = getDnewsletters(new Criteria(10));
        }
        return collDnewsletters;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DistributorCategory has previously
     * been saved, it will retrieve related Dnewsletters from storage.
     * If this DistributorCategory is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getDnewsletters(Criteria criteria) throws TorqueException
    {
        if (collDnewsletters == null)
        {
            if (isNew())
            {
               collDnewsletters = new ArrayList();
            }
            else
            {
                   criteria.add(DnewsletterPeer.DISTRIBUTOR_CAT_ID, getDistributorCatId() );
                   collDnewsletters = DnewsletterPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(DnewsletterPeer.DISTRIBUTOR_CAT_ID, getDistributorCatId());
                   if (!lastDnewslettersCriteria.equals(criteria))
                {
                    collDnewsletters = DnewsletterPeer.doSelect(criteria);
                }
            }
        }
        lastDnewslettersCriteria = criteria;

        return collDnewsletters;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDnewsletters(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDnewsletters(Connection con) throws TorqueException
    {
        if (collDnewsletters == null)
        {
            collDnewsletters = getDnewsletters(new Criteria(10), con);
        }
        return collDnewsletters;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this DistributorCategory has previously
     * been saved, it will retrieve related Dnewsletters from storage.
     * If this DistributorCategory is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDnewsletters(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collDnewsletters == null)
        {
            if (isNew())
            {
               collDnewsletters = new ArrayList();
            }
            else
            {
                     criteria.add(DnewsletterPeer.DISTRIBUTOR_CAT_ID, getDistributorCatId());
                     collDnewsletters = DnewsletterPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(DnewsletterPeer.DISTRIBUTOR_CAT_ID, getDistributorCatId());
                     if (!lastDnewslettersCriteria.equals(criteria))
                 {
                     collDnewsletters = DnewsletterPeer.doSelect(criteria, con);
                 }
             }
         }
         lastDnewslettersCriteria = criteria;

         return collDnewsletters;
     }

        

     
      
         
          
                    
                
        
        
    
      
      
          
                    
                
        
        
    
      
      
          
                    
                
        
        
    
      
      
          
                    
                
        
        
    
      
      
              
                            
                
        
        
    
      
      
              
                            
                
        
        
      



     
    
     


    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
             save(DistributorCategoryPeer.getMapBuilder()
                .getDatabaseMap().getName());
     }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
         try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }

     }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
      {
        alreadyInSave = true;



  
        // If this object has been modified, then save it to the database.
        if (isModified())
        {
            if (isNew())
            {
                DistributorCategoryPeer.doInsert((DistributorCategory) this, con);
                setNew(false);
            }
            else
            {
                DistributorCategoryPeer.doUpdate((DistributorCategory) this, con);
            }
        }

                                    
                
          if (collDistributors != null)
          {
              for (int i = 0; i < collDistributors.size(); i++)
              {
                  ((Distributor) collDistributors.get(i)).save(con);
              }
          }
                                        
                
          if (collDnewsletters != null)
          {
              for (int i = 0; i < collDnewsletters.size(); i++)
              {
                  ((Dnewsletter) collDnewsletters.get(i)).save(con);
              }
          }
                  alreadyInSave = false;
      }
      }


                        
    
    

        /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param  distributor_cat_id ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
                    setDistributorCatId(((NumberKey) key).intValue());
            }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
                    setDistributorCatId(Integer.parseInt(key));
            }


    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        return SimpleKey.keyFor(getDistributorCatId());
    }

 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public DistributorCategory copy() throws TorqueException
    {
        return copyInto(new DistributorCategory());
    }

    protected DistributorCategory copyInto(DistributorCategory copyObj) throws TorqueException
    {
        copyObj.setDistributorCatId(distributor_cat_id);
        copyObj.setDistributorCatName(distributor_cat_name);

  copyObj.setNew(false);
                                    
                
        List v = getDistributors();
        for (int i = 0; i < v.size(); i++)
        {
            Distributor obj = (Distributor) v.get(i);
            copyObj.addDistributor(obj.copy());
            ((Persistent) v.get(i)).setNew(true);
        }
                                              
                
        v = getDnewsletters();
        for (int i = 0; i < v.size(); i++)
        {
            Dnewsletter obj = (Dnewsletter) v.get(i);
            copyObj.addDnewsletter(obj.copy());
            ((Persistent) v.get(i)).setNew(true);
        }
                copyObj.setNew(true);

                      copyObj.setDistributorCatId(0);
                        return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public DistributorCategoryPeer getPeer()
    {
        return peer;
    }
}
