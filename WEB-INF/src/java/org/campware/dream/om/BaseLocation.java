package org.campware.dream.om;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Date;
import java.util.Collections;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;

   
      
      
      
      
   
/**
 * This class was autogenerated by Torque on:
 *
 * [Thu Jul 29 08:38:49 CEST 2004]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Location
 */
public abstract class BaseLocation extends BaseObject
{
    /** The Peer class */
    private static final LocationPeer peer =
        new LocationPeer();

                  
        /**
         * The value for the location_id field
         */
        private int location_id;
                                                                                      
        /**
         * The value for the location_code field
         */
        private String location_code = "AUTO";
                                                                            
        /**
         * The value for the status field
         */
        private int status = 30;
              
        /**
         * The value for the location_name_1 field
         */
        private String location_name_1;
              
        /**
         * The value for the location_name_2 field
         */
        private String location_name_2;
              
        /**
         * The value for the location_display field
         */
        private String location_display;
                                                                            
        /**
         * The value for the sales_district_id field
         */
        private int sales_district_id = 1000;
                                                                            
        /**
         * The value for the location_type field
         */
        private int location_type = 10;
                                                                            
        /**
         * The value for the gender field
         */
        private int gender = 10;
                                                                            
        /**
         * The value for the location_cat_id field
         */
        private int location_cat_id = 1000;
                                                                            
        /**
         * The value for the distributor_id field
         */
        private int distributor_id = 1000;
              
        /**
         * The value for the address_1 field
         */
        private String address_1;
              
        /**
         * The value for the address_2 field
         */
        private String address_2;
              
        /**
         * The value for the city field
         */
        private String city;
              
        /**
         * The value for the zip field
         */
        private String zip;
              
        /**
         * The value for the state field
         */
        private String state;
                                                                            
        /**
         * The value for the country_id field
         */
        private int country_id = 1000;
                                                                            
        /**
         * The value for the region_id field
         */
        private int region_id = 1000;
              
        /**
         * The value for the phone_1 field
         */
        private String phone_1;
              
        /**
         * The value for the phone_2 field
         */
        private String phone_2;
              
        /**
         * The value for the fax field
         */
        private String fax;
              
        /**
         * The value for the custom_1 field
         */
        private String custom_1;
              
        /**
         * The value for the custom_2 field
         */
        private String custom_2;
              
        /**
         * The value for the custom_3 field
         */
        private String custom_3;
              
        /**
         * The value for the custom_4 field
         */
        private String custom_4;
              
        /**
         * The value for the custom_5 field
         */
        private String custom_5;
              
        /**
         * The value for the custom_6 field
         */
        private String custom_6;
              
        /**
         * The value for the notes field
         */
        private String notes;
              
        /**
         * The value for the created field
         */
        private Date created;
              
        /**
         * The value for the modified field
         */
        private Date modified;
              
        /**
         * The value for the created_by field
         */
        private String created_by;
              
        /**
         * The value for the modified_by field
         */
        private String modified_by;
      
      
        /**
         * Get the LocationId
         *
         * @return int
         */
        public int getLocationId()
        {
            return location_id;
        }

                                                                              
        /**
         * Set the value of LocationId
         *
         * @param v new value
         */
        public void setLocationId(int v) throws TorqueException
        {
          


         if (this.location_id != v)
        {
             this.location_id = v;
            setModified(true);
        }

                  
                                                  
              // update associated DorderItem
              if (collDorderItems != null)
              {
                  for (int i = 0; i < collDorderItems.size(); i++)
                  {
                      ((DorderItem) collDorderItems.get(i))
                          .setLocationId(v);
                  }
              }
                                   }


        /**
         * Get the LocationCode
         *
         * @return String
         */
        public String getLocationCode()
        {
            return location_code;
        }

                                            
        /**
         * Set the value of LocationCode
         *
         * @param v new value
         */
        public void setLocationCode(String v) 
        {
          


         if (!ObjectUtils.equals(this.location_code, v))
        {
             this.location_code = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Status
         *
         * @return int
         */
        public int getStatus()
        {
            return status;
        }

                                            
        /**
         * Set the value of Status
         *
         * @param v new value
         */
        public void setStatus(int v) 
        {
          


         if (this.status != v)
        {
             this.status = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the LocationName1
         *
         * @return String
         */
        public String getLocationName1()
        {
            return location_name_1;
        }

                                            
        /**
         * Set the value of LocationName1
         *
         * @param v new value
         */
        public void setLocationName1(String v) 
        {
          


         if (!ObjectUtils.equals(this.location_name_1, v))
        {
             this.location_name_1 = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the LocationName2
         *
         * @return String
         */
        public String getLocationName2()
        {
            return location_name_2;
        }

                                            
        /**
         * Set the value of LocationName2
         *
         * @param v new value
         */
        public void setLocationName2(String v) 
        {
          


         if (!ObjectUtils.equals(this.location_name_2, v))
        {
             this.location_name_2 = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the LocationDisplay
         *
         * @return String
         */
        public String getLocationDisplay()
        {
            return location_display;
        }

                                            
        /**
         * Set the value of LocationDisplay
         *
         * @param v new value
         */
        public void setLocationDisplay(String v) 
        {
          


         if (!ObjectUtils.equals(this.location_display, v))
        {
             this.location_display = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the SalesDistrictId
         *
         * @return int
         */
        public int getSalesDistrictId()
        {
            return sales_district_id;
        }

                                                      
        /**
         * Set the value of SalesDistrictId
         *
         * @param v new value
         */
        public void setSalesDistrictId(int v) throws TorqueException
        {
          


         if (this.sales_district_id != v)
        {
             this.sales_district_id = v;
            setModified(true);
        }

                                          
                if (aSalesDistrict != null && !(aSalesDistrict.getSalesDistrictId()==v))
                {
            aSalesDistrict = null;
        }
          
                       }


        /**
         * Get the LocationType
         *
         * @return int
         */
        public int getLocationType()
        {
            return location_type;
        }

                                            
        /**
         * Set the value of LocationType
         *
         * @param v new value
         */
        public void setLocationType(int v) 
        {
          


         if (this.location_type != v)
        {
             this.location_type = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Gender
         *
         * @return int
         */
        public int getGender()
        {
            return gender;
        }

                                            
        /**
         * Set the value of Gender
         *
         * @param v new value
         */
        public void setGender(int v) 
        {
          


         if (this.gender != v)
        {
             this.gender = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the LocationCatId
         *
         * @return int
         */
        public int getLocationCatId()
        {
            return location_cat_id;
        }

                                                      
        /**
         * Set the value of LocationCatId
         *
         * @param v new value
         */
        public void setLocationCatId(int v) throws TorqueException
        {
          


         if (this.location_cat_id != v)
        {
             this.location_cat_id = v;
            setModified(true);
        }

                                          
                if (aLocationCategory != null && !(aLocationCategory.getLocationCatId()==v))
                {
            aLocationCategory = null;
        }
          
                       }


        /**
         * Get the DistributorId
         *
         * @return int
         */
        public int getDistributorId()
        {
            return distributor_id;
        }

                                                      
        /**
         * Set the value of DistributorId
         *
         * @param v new value
         */
        public void setDistributorId(int v) throws TorqueException
        {
          


         if (this.distributor_id != v)
        {
             this.distributor_id = v;
            setModified(true);
        }

                                          
                if (aDistributor != null && !(aDistributor.getDistributorId()==v))
                {
            aDistributor = null;
        }
          
                       }


        /**
         * Get the Address1
         *
         * @return String
         */
        public String getAddress1()
        {
            return address_1;
        }

                                            
        /**
         * Set the value of Address1
         *
         * @param v new value
         */
        public void setAddress1(String v) 
        {
          


         if (!ObjectUtils.equals(this.address_1, v))
        {
             this.address_1 = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Address2
         *
         * @return String
         */
        public String getAddress2()
        {
            return address_2;
        }

                                            
        /**
         * Set the value of Address2
         *
         * @param v new value
         */
        public void setAddress2(String v) 
        {
          


         if (!ObjectUtils.equals(this.address_2, v))
        {
             this.address_2 = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the City
         *
         * @return String
         */
        public String getCity()
        {
            return city;
        }

                                            
        /**
         * Set the value of City
         *
         * @param v new value
         */
        public void setCity(String v) 
        {
          


         if (!ObjectUtils.equals(this.city, v))
        {
             this.city = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Zip
         *
         * @return String
         */
        public String getZip()
        {
            return zip;
        }

                                            
        /**
         * Set the value of Zip
         *
         * @param v new value
         */
        public void setZip(String v) 
        {
          


         if (!ObjectUtils.equals(this.zip, v))
        {
             this.zip = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the State
         *
         * @return String
         */
        public String getState()
        {
            return state;
        }

                                            
        /**
         * Set the value of State
         *
         * @param v new value
         */
        public void setState(String v) 
        {
          


         if (!ObjectUtils.equals(this.state, v))
        {
             this.state = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the CountryId
         *
         * @return int
         */
        public int getCountryId()
        {
            return country_id;
        }

                                                      
        /**
         * Set the value of CountryId
         *
         * @param v new value
         */
        public void setCountryId(int v) throws TorqueException
        {
          


         if (this.country_id != v)
        {
             this.country_id = v;
            setModified(true);
        }

                                          
                if (aCountry != null && !(aCountry.getCountryId()==v))
                {
            aCountry = null;
        }
          
                       }


        /**
         * Get the RegionId
         *
         * @return int
         */
        public int getRegionId()
        {
            return region_id;
        }

                                                      
        /**
         * Set the value of RegionId
         *
         * @param v new value
         */
        public void setRegionId(int v) throws TorqueException
        {
          


         if (this.region_id != v)
        {
             this.region_id = v;
            setModified(true);
        }

                                          
                if (aRegion != null && !(aRegion.getRegionId()==v))
                {
            aRegion = null;
        }
          
                       }


        /**
         * Get the Phone1
         *
         * @return String
         */
        public String getPhone1()
        {
            return phone_1;
        }

                                            
        /**
         * Set the value of Phone1
         *
         * @param v new value
         */
        public void setPhone1(String v) 
        {
          


         if (!ObjectUtils.equals(this.phone_1, v))
        {
             this.phone_1 = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Phone2
         *
         * @return String
         */
        public String getPhone2()
        {
            return phone_2;
        }

                                            
        /**
         * Set the value of Phone2
         *
         * @param v new value
         */
        public void setPhone2(String v) 
        {
          


         if (!ObjectUtils.equals(this.phone_2, v))
        {
             this.phone_2 = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Fax
         *
         * @return String
         */
        public String getFax()
        {
            return fax;
        }

                                            
        /**
         * Set the value of Fax
         *
         * @param v new value
         */
        public void setFax(String v) 
        {
          


         if (!ObjectUtils.equals(this.fax, v))
        {
             this.fax = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Custom1
         *
         * @return String
         */
        public String getCustom1()
        {
            return custom_1;
        }

                                            
        /**
         * Set the value of Custom1
         *
         * @param v new value
         */
        public void setCustom1(String v) 
        {
          


         if (!ObjectUtils.equals(this.custom_1, v))
        {
             this.custom_1 = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Custom2
         *
         * @return String
         */
        public String getCustom2()
        {
            return custom_2;
        }

                                            
        /**
         * Set the value of Custom2
         *
         * @param v new value
         */
        public void setCustom2(String v) 
        {
          


         if (!ObjectUtils.equals(this.custom_2, v))
        {
             this.custom_2 = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Custom3
         *
         * @return String
         */
        public String getCustom3()
        {
            return custom_3;
        }

                                            
        /**
         * Set the value of Custom3
         *
         * @param v new value
         */
        public void setCustom3(String v) 
        {
          


         if (!ObjectUtils.equals(this.custom_3, v))
        {
             this.custom_3 = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Custom4
         *
         * @return String
         */
        public String getCustom4()
        {
            return custom_4;
        }

                                            
        /**
         * Set the value of Custom4
         *
         * @param v new value
         */
        public void setCustom4(String v) 
        {
          


         if (!ObjectUtils.equals(this.custom_4, v))
        {
             this.custom_4 = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Custom5
         *
         * @return String
         */
        public String getCustom5()
        {
            return custom_5;
        }

                                            
        /**
         * Set the value of Custom5
         *
         * @param v new value
         */
        public void setCustom5(String v) 
        {
          


         if (!ObjectUtils.equals(this.custom_5, v))
        {
             this.custom_5 = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Custom6
         *
         * @return String
         */
        public String getCustom6()
        {
            return custom_6;
        }

                                            
        /**
         * Set the value of Custom6
         *
         * @param v new value
         */
        public void setCustom6(String v) 
        {
          


         if (!ObjectUtils.equals(this.custom_6, v))
        {
             this.custom_6 = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Notes
         *
         * @return String
         */
        public String getNotes()
        {
            return notes;
        }

                                            
        /**
         * Set the value of Notes
         *
         * @param v new value
         */
        public void setNotes(String v) 
        {
          


         if (!ObjectUtils.equals(this.notes, v))
        {
             this.notes = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Created
         *
         * @return Date
         */
        public Date getCreated()
        {
            return created;
        }

                                            
        /**
         * Set the value of Created
         *
         * @param v new value
         */
        public void setCreated(Date v) 
        {
          


         if (!ObjectUtils.equals(this.created, v))
        {
             this.created = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Modified
         *
         * @return Date
         */
        public Date getModified()
        {
            return modified;
        }

                                            
        /**
         * Set the value of Modified
         *
         * @param v new value
         */
        public void setModified(Date v) 
        {
          


         if (!ObjectUtils.equals(this.modified, v))
        {
             this.modified = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the CreatedBy
         *
         * @return String
         */
        public String getCreatedBy()
        {
            return created_by;
        }

                                            
        /**
         * Set the value of CreatedBy
         *
         * @param v new value
         */
        public void setCreatedBy(String v) 
        {
          


         if (!ObjectUtils.equals(this.created_by, v))
        {
             this.created_by = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the ModifiedBy
         *
         * @return String
         */
        public String getModifiedBy()
        {
            return modified_by;
        }

                                            
        /**
         * Set the value of ModifiedBy
         *
         * @param v new value
         */
        public void setModifiedBy(String v) 
        {
          


         if (!ObjectUtils.equals(this.modified_by, v))
        {
             this.modified_by = v;
            setModified(true);
        }

                  
                       }


 
     
   
             
   
       private LocationCategory aLocationCategory;

    /**
     * Declares an association between this object and a LocationCategory object
     *
     * @param v LocationCategory
     * @throws TorqueException
     */
    public void setLocationCategory(LocationCategory v) throws TorqueException
    {
           if (v == null)
        {
                        setLocationCatId(1000);
                    }
        else
        {
            setLocationCatId(v.getLocationCatId());
        }
           aLocationCategory = v;
    }

                 
    /**
     * Get the associated LocationCategory object
     *
     * @return the associated LocationCategory object
     * @throws TorqueException
     */
    public LocationCategory getLocationCategory() throws TorqueException
    {
        if (aLocationCategory == null && (this.location_cat_id > 0))
        {
              aLocationCategory = LocationCategoryPeer.retrieveByPK(SimpleKey.keyFor(this.location_cat_id));
      
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               LocationCategory obj = LocationCategoryPeer.retrieveByPK(this.location_cat_id);
               obj.addLocations(this);
             */
        }
        return aLocationCategory;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setLocationCategoryKey(ObjectKey key) throws TorqueException
    {
    
                                        setLocationCatId(((NumberKey) key).intValue());
                    }
 
   
             
   
       private Country aCountry;

    /**
     * Declares an association between this object and a Country object
     *
     * @param v Country
     * @throws TorqueException
     */
    public void setCountry(Country v) throws TorqueException
    {
           if (v == null)
        {
                        setCountryId(1000);
                    }
        else
        {
            setCountryId(v.getCountryId());
        }
           aCountry = v;
    }

                 
    /**
     * Get the associated Country object
     *
     * @return the associated Country object
     * @throws TorqueException
     */
    public Country getCountry() throws TorqueException
    {
        if (aCountry == null && (this.country_id > 0))
        {
              aCountry = CountryPeer.retrieveByPK(SimpleKey.keyFor(this.country_id));
      
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Country obj = CountryPeer.retrieveByPK(this.country_id);
               obj.addLocations(this);
             */
        }
        return aCountry;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setCountryKey(ObjectKey key) throws TorqueException
    {
    
                                        setCountryId(((NumberKey) key).intValue());
                    }
 
   
             
   
       private Region aRegion;

    /**
     * Declares an association between this object and a Region object
     *
     * @param v Region
     * @throws TorqueException
     */
    public void setRegion(Region v) throws TorqueException
    {
           if (v == null)
        {
                        setRegionId(1000);
                    }
        else
        {
            setRegionId(v.getRegionId());
        }
           aRegion = v;
    }

                 
    /**
     * Get the associated Region object
     *
     * @return the associated Region object
     * @throws TorqueException
     */
    public Region getRegion() throws TorqueException
    {
        if (aRegion == null && (this.region_id > 0))
        {
              aRegion = RegionPeer.retrieveByPK(SimpleKey.keyFor(this.region_id));
      
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Region obj = RegionPeer.retrieveByPK(this.region_id);
               obj.addLocations(this);
             */
        }
        return aRegion;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setRegionKey(ObjectKey key) throws TorqueException
    {
    
                                        setRegionId(((NumberKey) key).intValue());
                    }
 
   
             
   
       private SalesDistrict aSalesDistrict;

    /**
     * Declares an association between this object and a SalesDistrict object
     *
     * @param v SalesDistrict
     * @throws TorqueException
     */
    public void setSalesDistrict(SalesDistrict v) throws TorqueException
    {
           if (v == null)
        {
                        setSalesDistrictId(1000);
                    }
        else
        {
            setSalesDistrictId(v.getSalesDistrictId());
        }
           aSalesDistrict = v;
    }

                 
    /**
     * Get the associated SalesDistrict object
     *
     * @return the associated SalesDistrict object
     * @throws TorqueException
     */
    public SalesDistrict getSalesDistrict() throws TorqueException
    {
        if (aSalesDistrict == null && (this.sales_district_id > 0))
        {
              aSalesDistrict = SalesDistrictPeer.retrieveByPK(SimpleKey.keyFor(this.sales_district_id));
      
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               SalesDistrict obj = SalesDistrictPeer.retrieveByPK(this.sales_district_id);
               obj.addLocations(this);
             */
        }
        return aSalesDistrict;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setSalesDistrictKey(ObjectKey key) throws TorqueException
    {
    
                                        setSalesDistrictId(((NumberKey) key).intValue());
                    }
 
   
             
   
       private Distributor aDistributor;

    /**
     * Declares an association between this object and a Distributor object
     *
     * @param v Distributor
     * @throws TorqueException
     */
    public void setDistributor(Distributor v) throws TorqueException
    {
           if (v == null)
        {
                        setDistributorId(1000);
                    }
        else
        {
            setDistributorId(v.getDistributorId());
        }
           aDistributor = v;
    }

                 
    /**
     * Get the associated Distributor object
     *
     * @return the associated Distributor object
     * @throws TorqueException
     */
    public Distributor getDistributor() throws TorqueException
    {
        if (aDistributor == null && (this.distributor_id > 0))
        {
              aDistributor = DistributorPeer.retrieveByPK(SimpleKey.keyFor(this.distributor_id));
      
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Distributor obj = DistributorPeer.retrieveByPK(this.distributor_id);
               obj.addLocations(this);
             */
        }
        return aDistributor;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setDistributorKey(ObjectKey key) throws TorqueException
    {
    
                                        setDistributorId(((NumberKey) key).intValue());
                    }
    
                
      
    /**
     * Collection to store aggregation of collDorderItems
     */
    protected List collDorderItems;

    /**
     * Temporary storage of collDorderItems to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initDorderItems()
    {
        if (collDorderItems == null)
        {
            collDorderItems = new ArrayList();
        }
    }

    /**
     * Method called to associate a DorderItem object to this object
     * through the DorderItem foreign key attribute
     *
     * @param l DorderItem
     * @throws TorqueException
     */
    public void addDorderItem(DorderItem l) throws TorqueException
    {
        getDorderItems().add(l);
        l.setLocation((Location) this);
    }

    /**
     * The criteria used to select the current contents of collDorderItems
     */
    private Criteria lastDorderItemsCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDorderItems(new Criteria())
     *
     * @throws TorqueException
     */
    public List getDorderItems() throws TorqueException
    {
        if (collDorderItems == null)
        {
            collDorderItems = getDorderItems(new Criteria(10));
        }
        return collDorderItems;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Location has previously
     * been saved, it will retrieve related DorderItems from storage.
     * If this Location is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getDorderItems(Criteria criteria) throws TorqueException
    {
        if (collDorderItems == null)
        {
            if (isNew())
            {
               collDorderItems = new ArrayList();
            }
            else
            {
                   criteria.add(DorderItemPeer.LOCATION_ID, getLocationId() );
                   collDorderItems = DorderItemPeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                   criteria.add(DorderItemPeer.LOCATION_ID, getLocationId());
                   if (!lastDorderItemsCriteria.equals(criteria))
                {
                    collDorderItems = DorderItemPeer.doSelect(criteria);
                }
            }
        }
        lastDorderItemsCriteria = criteria;

        return collDorderItems;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getDorderItems(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDorderItems(Connection con) throws TorqueException
    {
        if (collDorderItems == null)
        {
            collDorderItems = getDorderItems(new Criteria(10), con);
        }
        return collDorderItems;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this Location has previously
     * been saved, it will retrieve related DorderItems from storage.
     * If this Location is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getDorderItems(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collDorderItems == null)
        {
            if (isNew())
            {
               collDorderItems = new ArrayList();
            }
            else
            {
                     criteria.add(DorderItemPeer.LOCATION_ID, getLocationId());
                     collDorderItems = DorderItemPeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                     criteria.add(DorderItemPeer.LOCATION_ID, getLocationId());
                     if (!lastDorderItemsCriteria.equals(criteria))
                 {
                     collDorderItems = DorderItemPeer.doSelect(criteria, con);
                 }
             }
         }
         lastDorderItemsCriteria = criteria;

         return collDorderItems;
     }

    

     
      
      
          
                    
                
        
        
    
      
         
          
                    
                
        
        
      



     
    
     


    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
             save(LocationPeer.getMapBuilder()
                .getDatabaseMap().getName());
     }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
         try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }

     }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
      {
        alreadyInSave = true;



  
        // If this object has been modified, then save it to the database.
        if (isModified())
        {
            if (isNew())
            {
                LocationPeer.doInsert((Location) this, con);
                setNew(false);
            }
            else
            {
                LocationPeer.doUpdate((Location) this, con);
            }
        }

                                    
                
          if (collDorderItems != null)
          {
              for (int i = 0; i < collDorderItems.size(); i++)
              {
                  ((DorderItem) collDorderItems.get(i)).save(con);
              }
          }
                  alreadyInSave = false;
      }
      }


                        
    
    

        /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param  location_id ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
                    setLocationId(((NumberKey) key).intValue());
            }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
                    setLocationId(Integer.parseInt(key));
            }


    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        return SimpleKey.keyFor(getLocationId());
    }

 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public Location copy() throws TorqueException
    {
        return copyInto(new Location());
    }

    protected Location copyInto(Location copyObj) throws TorqueException
    {
        copyObj.setLocationId(location_id);
        copyObj.setLocationCode(location_code);
        copyObj.setStatus(status);
        copyObj.setLocationName1(location_name_1);
        copyObj.setLocationName2(location_name_2);
        copyObj.setLocationDisplay(location_display);
        copyObj.setSalesDistrictId(sales_district_id);
        copyObj.setLocationType(location_type);
        copyObj.setGender(gender);
        copyObj.setLocationCatId(location_cat_id);
        copyObj.setDistributorId(distributor_id);
        copyObj.setAddress1(address_1);
        copyObj.setAddress2(address_2);
        copyObj.setCity(city);
        copyObj.setZip(zip);
        copyObj.setState(state);
        copyObj.setCountryId(country_id);
        copyObj.setRegionId(region_id);
        copyObj.setPhone1(phone_1);
        copyObj.setPhone2(phone_2);
        copyObj.setFax(fax);
        copyObj.setCustom1(custom_1);
        copyObj.setCustom2(custom_2);
        copyObj.setCustom3(custom_3);
        copyObj.setCustom4(custom_4);
        copyObj.setCustom5(custom_5);
        copyObj.setCustom6(custom_6);
        copyObj.setNotes(notes);
        copyObj.setCreated(created);
        copyObj.setModified(modified);
        copyObj.setCreatedBy(created_by);
        copyObj.setModifiedBy(modified_by);

  copyObj.setNew(false);
                                    
                
        List v = getDorderItems();
        for (int i = 0; i < v.size(); i++)
        {
            DorderItem obj = (DorderItem) v.get(i);
            copyObj.addDorderItem(obj.copy());
            ((Persistent) v.get(i)).setNew(true);
        }
                copyObj.setNew(true);

                      copyObj.setLocationId(0);
                                                                                                                                                return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public LocationPeer getPeer()
    {
        return peer;
    }
}
