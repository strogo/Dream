package org.campware.dream.om;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Date;
import java.util.Collections;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;

   
      
      
      
      
      
   
/**
 * This class was autogenerated by Torque on:
 *
 * [Thu Jul 29 08:38:49 CEST 2004]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to Dnewsletter
 */
public abstract class BaseDnewsletter extends BaseObject
{
    /** The Peer class */
    private static final DnewsletterPeer peer =
        new DnewsletterPeer();

                  
        /**
         * The value for the dnewsletter_id field
         */
        private int dnewsletter_id;
                                                                                      
        /**
         * The value for the dnewsletter_code field
         */
        private String dnewsletter_code = "AUTO";
                                                                            
        /**
         * The value for the status field
         */
        private int status = 30;
                                                                            
        /**
         * The value for the priority field
         */
        private int priority = 30;
              
        /**
         * The value for the issued_date field
         */
        private Date issued_date;
              
        /**
         * The value for the closed_date field
         */
        private Date closed_date;
              
        /**
         * The value for the sent_time field
         */
        private Date sent_time;
                                                                            
        /**
         * The value for the email_format field
         */
        private int email_format = 10;
                                                                            
        /**
         * The value for the language_id field
         */
        private int language_id = 1000;
                                                                            
        /**
         * The value for the distributor_cat_id field
         */
        private int distributor_cat_id = 999;
                                                                            
        /**
         * The value for the distributor_type field
         */
        private int distributor_type = 1;
                                                                            
        /**
         * The value for the dist_language_id field
         */
        private int dist_language_id = 999;
                                                                            
        /**
         * The value for the dist_country_id field
         */
        private int dist_country_id = 999;
                                                                            
        /**
         * The value for the project_id field
         */
        private int project_id = 1000;
                                                                            
        /**
         * The value for the product_id field
         */
        private int product_id = 1000;
              
        /**
         * The value for the subject field
         */
        private String subject;
              
        /**
         * The value for the body field
         */
        private String body;
              
        /**
         * The value for the notes field
         */
        private String notes;
              
        /**
         * The value for the created field
         */
        private Date created;
              
        /**
         * The value for the modified field
         */
        private Date modified;
              
        /**
         * The value for the created_by field
         */
        private String created_by;
              
        /**
         * The value for the modified_by field
         */
        private String modified_by;
      
      
        /**
         * Get the DnewsletterId
         *
         * @return int
         */
        public int getDnewsletterId()
        {
            return dnewsletter_id;
        }

                                            
        /**
         * Set the value of DnewsletterId
         *
         * @param v new value
         */
        public void setDnewsletterId(int v) 
        {
          


         if (this.dnewsletter_id != v)
        {
             this.dnewsletter_id = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the DnewsletterCode
         *
         * @return String
         */
        public String getDnewsletterCode()
        {
            return dnewsletter_code;
        }

                                            
        /**
         * Set the value of DnewsletterCode
         *
         * @param v new value
         */
        public void setDnewsletterCode(String v) 
        {
          


         if (!ObjectUtils.equals(this.dnewsletter_code, v))
        {
             this.dnewsletter_code = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Status
         *
         * @return int
         */
        public int getStatus()
        {
            return status;
        }

                                            
        /**
         * Set the value of Status
         *
         * @param v new value
         */
        public void setStatus(int v) 
        {
          


         if (this.status != v)
        {
             this.status = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Priority
         *
         * @return int
         */
        public int getPriority()
        {
            return priority;
        }

                                            
        /**
         * Set the value of Priority
         *
         * @param v new value
         */
        public void setPriority(int v) 
        {
          


         if (this.priority != v)
        {
             this.priority = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the IssuedDate
         *
         * @return Date
         */
        public Date getIssuedDate()
        {
            return issued_date;
        }

                                            
        /**
         * Set the value of IssuedDate
         *
         * @param v new value
         */
        public void setIssuedDate(Date v) 
        {
          


         if (!ObjectUtils.equals(this.issued_date, v))
        {
             this.issued_date = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the ClosedDate
         *
         * @return Date
         */
        public Date getClosedDate()
        {
            return closed_date;
        }

                                            
        /**
         * Set the value of ClosedDate
         *
         * @param v new value
         */
        public void setClosedDate(Date v) 
        {
          


         if (!ObjectUtils.equals(this.closed_date, v))
        {
             this.closed_date = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the SentTime
         *
         * @return Date
         */
        public Date getSentTime()
        {
            return sent_time;
        }

                                            
        /**
         * Set the value of SentTime
         *
         * @param v new value
         */
        public void setSentTime(Date v) 
        {
          


         if (!ObjectUtils.equals(this.sent_time, v))
        {
             this.sent_time = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the EmailFormat
         *
         * @return int
         */
        public int getEmailFormat()
        {
            return email_format;
        }

                                            
        /**
         * Set the value of EmailFormat
         *
         * @param v new value
         */
        public void setEmailFormat(int v) 
        {
          


         if (this.email_format != v)
        {
             this.email_format = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the LanguageId
         *
         * @return int
         */
        public int getLanguageId()
        {
            return language_id;
        }

                                                      
        /**
         * Set the value of LanguageId
         *
         * @param v new value
         */
        public void setLanguageId(int v) throws TorqueException
        {
          


         if (this.language_id != v)
        {
             this.language_id = v;
            setModified(true);
        }

                                                                                                                
                if (aLanguageRelatedByLanguageId != null && !(aLanguageRelatedByLanguageId.getLanguageId()==v))
                {
            aLanguageRelatedByLanguageId = null;
        }
          
                       }


        /**
         * Get the DistributorCatId
         *
         * @return int
         */
        public int getDistributorCatId()
        {
            return distributor_cat_id;
        }

                                                      
        /**
         * Set the value of DistributorCatId
         *
         * @param v new value
         */
        public void setDistributorCatId(int v) throws TorqueException
        {
          


         if (this.distributor_cat_id != v)
        {
             this.distributor_cat_id = v;
            setModified(true);
        }

                                          
                if (aDistributorCategory != null && !(aDistributorCategory.getDistributorCatId()==v))
                {
            aDistributorCategory = null;
        }
          
                       }


        /**
         * Get the DistributorType
         *
         * @return int
         */
        public int getDistributorType()
        {
            return distributor_type;
        }

                                            
        /**
         * Set the value of DistributorType
         *
         * @param v new value
         */
        public void setDistributorType(int v) 
        {
          


         if (this.distributor_type != v)
        {
             this.distributor_type = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the DistLanguageId
         *
         * @return int
         */
        public int getDistLanguageId()
        {
            return dist_language_id;
        }

                                                      
        /**
         * Set the value of DistLanguageId
         *
         * @param v new value
         */
        public void setDistLanguageId(int v) throws TorqueException
        {
          


         if (this.dist_language_id != v)
        {
             this.dist_language_id = v;
            setModified(true);
        }

                                                                                                                
                if (aLanguageRelatedByDistLanguageId != null && !(aLanguageRelatedByDistLanguageId.getLanguageId()==v))
                {
            aLanguageRelatedByDistLanguageId = null;
        }
          
                       }


        /**
         * Get the DistCountryId
         *
         * @return int
         */
        public int getDistCountryId()
        {
            return dist_country_id;
        }

                                                      
        /**
         * Set the value of DistCountryId
         *
         * @param v new value
         */
        public void setDistCountryId(int v) throws TorqueException
        {
          


         if (this.dist_country_id != v)
        {
             this.dist_country_id = v;
            setModified(true);
        }

                                          
                if (aCountry != null && !(aCountry.getCountryId()==v))
                {
            aCountry = null;
        }
          
                       }


        /**
         * Get the ProjectId
         *
         * @return int
         */
        public int getProjectId()
        {
            return project_id;
        }

                                                      
        /**
         * Set the value of ProjectId
         *
         * @param v new value
         */
        public void setProjectId(int v) throws TorqueException
        {
          


         if (this.project_id != v)
        {
             this.project_id = v;
            setModified(true);
        }

                                          
                if (aProject != null && !(aProject.getProjectId()==v))
                {
            aProject = null;
        }
          
                       }


        /**
         * Get the ProductId
         *
         * @return int
         */
        public int getProductId()
        {
            return product_id;
        }

                                                      
        /**
         * Set the value of ProductId
         *
         * @param v new value
         */
        public void setProductId(int v) throws TorqueException
        {
          


         if (this.product_id != v)
        {
             this.product_id = v;
            setModified(true);
        }

                                          
                if (aProduct != null && !(aProduct.getProductId()==v))
                {
            aProduct = null;
        }
          
                       }


        /**
         * Get the Subject
         *
         * @return String
         */
        public String getSubject()
        {
            return subject;
        }

                                            
        /**
         * Set the value of Subject
         *
         * @param v new value
         */
        public void setSubject(String v) 
        {
          


         if (!ObjectUtils.equals(this.subject, v))
        {
             this.subject = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Body
         *
         * @return String
         */
        public String getBody()
        {
            return body;
        }

                                            
        /**
         * Set the value of Body
         *
         * @param v new value
         */
        public void setBody(String v) 
        {
          


         if (!ObjectUtils.equals(this.body, v))
        {
             this.body = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Notes
         *
         * @return String
         */
        public String getNotes()
        {
            return notes;
        }

                                            
        /**
         * Set the value of Notes
         *
         * @param v new value
         */
        public void setNotes(String v) 
        {
          


         if (!ObjectUtils.equals(this.notes, v))
        {
             this.notes = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Created
         *
         * @return Date
         */
        public Date getCreated()
        {
            return created;
        }

                                            
        /**
         * Set the value of Created
         *
         * @param v new value
         */
        public void setCreated(Date v) 
        {
          


         if (!ObjectUtils.equals(this.created, v))
        {
             this.created = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the Modified
         *
         * @return Date
         */
        public Date getModified()
        {
            return modified;
        }

                                            
        /**
         * Set the value of Modified
         *
         * @param v new value
         */
        public void setModified(Date v) 
        {
          


         if (!ObjectUtils.equals(this.modified, v))
        {
             this.modified = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the CreatedBy
         *
         * @return String
         */
        public String getCreatedBy()
        {
            return created_by;
        }

                                            
        /**
         * Set the value of CreatedBy
         *
         * @param v new value
         */
        public void setCreatedBy(String v) 
        {
          


         if (!ObjectUtils.equals(this.created_by, v))
        {
             this.created_by = v;
            setModified(true);
        }

                  
                       }


        /**
         * Get the ModifiedBy
         *
         * @return String
         */
        public String getModifiedBy()
        {
            return modified_by;
        }

                                            
        /**
         * Set the value of ModifiedBy
         *
         * @param v new value
         */
        public void setModifiedBy(String v) 
        {
          


         if (!ObjectUtils.equals(this.modified_by, v))
        {
             this.modified_by = v;
            setModified(true);
        }

                  
                       }


 
     
   
             
   
       private DistributorCategory aDistributorCategory;

    /**
     * Declares an association between this object and a DistributorCategory object
     *
     * @param v DistributorCategory
     * @throws TorqueException
     */
    public void setDistributorCategory(DistributorCategory v) throws TorqueException
    {
           if (v == null)
        {
                        setDistributorCatId(999);
                    }
        else
        {
            setDistributorCatId(v.getDistributorCatId());
        }
           aDistributorCategory = v;
    }

                 
    /**
     * Get the associated DistributorCategory object
     *
     * @return the associated DistributorCategory object
     * @throws TorqueException
     */
    public DistributorCategory getDistributorCategory() throws TorqueException
    {
        if (aDistributorCategory == null && (this.distributor_cat_id > 0))
        {
              aDistributorCategory = DistributorCategoryPeer.retrieveByPK(SimpleKey.keyFor(this.distributor_cat_id));
      
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               DistributorCategory obj = DistributorCategoryPeer.retrieveByPK(this.distributor_cat_id);
               obj.addDnewsletters(this);
             */
        }
        return aDistributorCategory;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setDistributorCategoryKey(ObjectKey key) throws TorqueException
    {
    
                                        setDistributorCatId(((NumberKey) key).intValue());
                    }
 
   
             
   
       private Project aProject;

    /**
     * Declares an association between this object and a Project object
     *
     * @param v Project
     * @throws TorqueException
     */
    public void setProject(Project v) throws TorqueException
    {
           if (v == null)
        {
                        setProjectId(1000);
                    }
        else
        {
            setProjectId(v.getProjectId());
        }
           aProject = v;
    }

                 
    /**
     * Get the associated Project object
     *
     * @return the associated Project object
     * @throws TorqueException
     */
    public Project getProject() throws TorqueException
    {
        if (aProject == null && (this.project_id > 0))
        {
              aProject = ProjectPeer.retrieveByPK(SimpleKey.keyFor(this.project_id));
      
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Project obj = ProjectPeer.retrieveByPK(this.project_id);
               obj.addDnewsletters(this);
             */
        }
        return aProject;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setProjectKey(ObjectKey key) throws TorqueException
    {
    
                                        setProjectId(((NumberKey) key).intValue());
                    }
 
   
             
   
       private Product aProduct;

    /**
     * Declares an association between this object and a Product object
     *
     * @param v Product
     * @throws TorqueException
     */
    public void setProduct(Product v) throws TorqueException
    {
           if (v == null)
        {
                        setProductId(1000);
                    }
        else
        {
            setProductId(v.getProductId());
        }
           aProduct = v;
    }

                 
    /**
     * Get the associated Product object
     *
     * @return the associated Product object
     * @throws TorqueException
     */
    public Product getProduct() throws TorqueException
    {
        if (aProduct == null && (this.product_id > 0))
        {
              aProduct = ProductPeer.retrieveByPK(SimpleKey.keyFor(this.product_id));
      
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Product obj = ProductPeer.retrieveByPK(this.product_id);
               obj.addDnewsletters(this);
             */
        }
        return aProduct;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setProductKey(ObjectKey key) throws TorqueException
    {
    
                                        setProductId(((NumberKey) key).intValue());
                    }
 
   
             
   
       private Country aCountry;

    /**
     * Declares an association between this object and a Country object
     *
     * @param v Country
     * @throws TorqueException
     */
    public void setCountry(Country v) throws TorqueException
    {
           if (v == null)
        {
                        setDistCountryId(999);
                    }
        else
        {
            setDistCountryId(v.getCountryId());
        }
           aCountry = v;
    }

                 
    /**
     * Get the associated Country object
     *
     * @return the associated Country object
     * @throws TorqueException
     */
    public Country getCountry() throws TorqueException
    {
        if (aCountry == null && (this.dist_country_id > 0))
        {
              aCountry = CountryPeer.retrieveByPK(SimpleKey.keyFor(this.dist_country_id));
      
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Country obj = CountryPeer.retrieveByPK(this.dist_country_id);
               obj.addDnewsletters(this);
             */
        }
        return aCountry;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setCountryKey(ObjectKey key) throws TorqueException
    {
    
                                        setDistCountryId(((NumberKey) key).intValue());
                    }
 
   
                 
      
       private Language aLanguageRelatedByDistLanguageId;

    /**
     * Declares an association between this object and a Language object
     *
     * @param v Language
     * @throws TorqueException
     */
    public void setLanguageRelatedByDistLanguageId(Language v) throws TorqueException
    {
           if (v == null)
        {
                        setDistLanguageId(999);
                    }
        else
        {
            setDistLanguageId(v.getLanguageId());
        }
           aLanguageRelatedByDistLanguageId = v;
    }

                 
    /**
     * Get the associated Language object
     *
     * @return the associated Language object
     * @throws TorqueException
     */
    public Language getLanguageRelatedByDistLanguageId() throws TorqueException
    {
        if (aLanguageRelatedByDistLanguageId == null && (this.dist_language_id > 0))
        {
              aLanguageRelatedByDistLanguageId = LanguagePeer.retrieveByPK(SimpleKey.keyFor(this.dist_language_id));
      
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Language obj = LanguagePeer.retrieveByPK(this.dist_language_id);
               obj.addDnewslettersRelatedByDistLanguageId(this);
             */
        }
        return aLanguageRelatedByDistLanguageId;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setLanguageRelatedByDistLanguageIdKey(ObjectKey key) throws TorqueException
    {
    
                                        setDistLanguageId(((NumberKey) key).intValue());
                    }
 
   
                 
      
       private Language aLanguageRelatedByLanguageId;

    /**
     * Declares an association between this object and a Language object
     *
     * @param v Language
     * @throws TorqueException
     */
    public void setLanguageRelatedByLanguageId(Language v) throws TorqueException
    {
           if (v == null)
        {
                        setLanguageId(1000);
                    }
        else
        {
            setLanguageId(v.getLanguageId());
        }
           aLanguageRelatedByLanguageId = v;
    }

                 
    /**
     * Get the associated Language object
     *
     * @return the associated Language object
     * @throws TorqueException
     */
    public Language getLanguageRelatedByLanguageId() throws TorqueException
    {
        if (aLanguageRelatedByLanguageId == null && (this.language_id > 0))
        {
              aLanguageRelatedByLanguageId = LanguagePeer.retrieveByPK(SimpleKey.keyFor(this.language_id));
      
            /* The following can be used instead of the line above to
               guarantee the related object contains a reference
               to this object, but this level of coupling
               may be undesirable in many circumstances.
               As it can lead to a db query with many results that may
               never be used.
               Language obj = LanguagePeer.retrieveByPK(this.language_id);
               obj.addDnewslettersRelatedByLanguageId(this);
             */
        }
        return aLanguageRelatedByLanguageId;
    }

    /**
     * Provides convenient way to set a relationship based on a
     * ObjectKey.  e.g.
     * <code>bar.setFooKey(foo.getPrimaryKey())</code>
     *
     */
    public void setLanguageRelatedByLanguageIdKey(ObjectKey key) throws TorqueException
    {
    
                                        setLanguageId(((NumberKey) key).intValue());
                    }
    
        
    
     


    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
             save(DnewsletterPeer.getMapBuilder()
                .getDatabaseMap().getName());
     }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
     *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
         try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }

     }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
        if (!alreadyInSave)
      {
        alreadyInSave = true;



  
        // If this object has been modified, then save it to the database.
        if (isModified())
        {
            if (isNew())
            {
                DnewsletterPeer.doInsert((Dnewsletter) this, con);
                setNew(false);
            }
            else
            {
                DnewsletterPeer.doUpdate((Dnewsletter) this, con);
            }
        }

              alreadyInSave = false;
      }
      }


                
    
    

        /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param  dnewsletter_id ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        
    {
                    setDnewsletterId(((NumberKey) key).intValue());
            }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) 
    {
                    setDnewsletterId(Integer.parseInt(key));
            }


    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
        return SimpleKey.keyFor(getDnewsletterId());
    }

 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
     * It then fills all the association collections and sets the
     * related objects to isNew=true.
     */
    public Dnewsletter copy() throws TorqueException
    {
        return copyInto(new Dnewsletter());
    }

    protected Dnewsletter copyInto(Dnewsletter copyObj) throws TorqueException
    {
        copyObj.setDnewsletterId(dnewsletter_id);
        copyObj.setDnewsletterCode(dnewsletter_code);
        copyObj.setStatus(status);
        copyObj.setPriority(priority);
        copyObj.setIssuedDate(issued_date);
        copyObj.setClosedDate(closed_date);
        copyObj.setSentTime(sent_time);
        copyObj.setEmailFormat(email_format);
        copyObj.setLanguageId(language_id);
        copyObj.setDistributorCatId(distributor_cat_id);
        copyObj.setDistributorType(distributor_type);
        copyObj.setDistLanguageId(dist_language_id);
        copyObj.setDistCountryId(dist_country_id);
        copyObj.setProjectId(project_id);
        copyObj.setProductId(product_id);
        copyObj.setSubject(subject);
        copyObj.setBody(body);
        copyObj.setNotes(notes);
        copyObj.setCreated(created);
        copyObj.setModified(modified);
        copyObj.setCreatedBy(created_by);
        copyObj.setModifiedBy(modified_by);

  copyObj.setNew(false);
      copyObj.setNew(true);

                      copyObj.setDnewsletterId(0);
                                                                                                        return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public DnewsletterPeer getPeer()
    {
        return peer;
    }
}
